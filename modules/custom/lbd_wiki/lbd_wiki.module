<?php

/**
 * @defgroup labdoowiki LabdooWiki: Module implementing Labdoo's wiki-type documentation system
 *
 * Implements supporting features for Labdoo's wiki. 
 *
 */


/**
 * @file
 * Main module file for the Labdoo Wiki 
 *
 * @ingroup labdoowiki
 *
 */


/**
 * Implementation of hook_views_api
 */
function lbd_wiki_views_api() {
  return array(
    'api' => 3.0,
  );
} 


/**
 * Implementation of hook_views_default_views
 */
function lbd_wiki_views_default_views() {

  // Teams view
  include 'lbd_wiki_views_books_list.inc';
  $views[$view->name] = $view;

  return $views;
}


/**
 * Implements hook_block_info().
 *
 */
function lbd_wiki_block_info() {
  $block['book_outline'] = array(
    'info' => 'Book Outline',
    'status' => 1,
    'visibility' => BLOCK_VISIBILITY_PHP,
    'weight' => -100,
    'pages' => "<?php return lbd_wiki_is_book_node() != NULL ?>", 
    'region' => "sidebar_second",
  );
  return $block;
}

/**
 * Implements hook_block_view().
 *
 */
function lbd_wiki_block_view($delta = '') {
  $printTOC = TRUE;
  $defaultLanguage = language_default();
  global $language;
  global $user;
  $code = "";

  if($delta != 'book_outline')
    return NULL;

  $book = lbd_wiki_is_book_node();
  if(!$book)
    return NULL;

  $nodeId = arg(1);

  if ($language->language != $defaultLanguage->language)
    $lang = '/' . $language->language;
  else
    $lang = '';

  // Vars and params for the menu_build_tree() function.
  $path = 'node/' . $book['bid'];
  $parent = menu_link_get_preferred($path, $book['menu_name']);
  $parameters = array(
    'only_active_trail' => FALSE,
    'min_depth' => $parent['depth'] + 0,
    'max_depth' => 5,
  );

  // Other translations link
  $nodeLoaded = node_load($book['bid']);
  $originalNodeId = labdoo_lib_get_field($nodeLoaded, 'field_reference_book', 'node', 'target_id');
  $allTranslationsURl = $lang. '/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$originalNodeId;
  $metadata = "href='$allTranslationsURl'";
  $code = $code . "<hr/>";
  $code = $code . "<img src='/profiles/labdoo/files/pictures/conversation.png' style='width: 20px; height: 21px;'/>&nbsp;" . 
                  "<a $metadata>" . t('Other translations of this book') . "</span></a></p>";

  // Build the tree and block title.
  $children = menu_build_tree($parent['menu_name'], $parameters);
  // Check if it is a single page book
  if(count($children) == 1) {
    $child = array_values($children)[0];
    if(count($child['below']) == 0) {
      // For single page wiki books, don't print the TOC
      $printTOC = FALSE;
    }
  }

  if($printTOC) {
    $userRoles = array_values($user->roles);
    if(in_array('book writer', $userRoles) || in_array('administrator', $userRoles)) { 
      $metadata = "href='$lang/admin/content/book/" . $book['bid'] . "'";
      $code = $code . "<img src='/profiles/labdoo/files/pictures/book.png' style='width: 20px; height: 19px;'/>&nbsp;" . 
                      "<a $metadata>" . t('Reorder this book\'s hierarchy') . "</span></a></p>";
    }

    $code = $code . "<hr/><br/>";

    foreach($children as $child1) {
      $code = $code . _process_child($child1, $nodeId, 0);
      foreach($child1['below'] as $child2) {
        $code = $code . _process_child($child2, $nodeId, 1);
        foreach($child2['below'] as $child3) {
          $code = $code . _process_child($child3, $nodeId, 2);
          foreach($child3['below'] as $child4) {
            $code = $code . _process_child($child4, $nodeId, 3);
            foreach($child4['below'] as $child5) {
              $code = $code . _process_child($child5, $nodeId, 4);
            }
          }
        }
      }
    }
  }

  // Build and return the $block array.
  // $book_name = (book_toc($book['bid'], 1));
  $block['subject'] = '<none>'; // l($book_name[$book['p1']], 'node/' . $book['bid']);
  $block['content'] = array('#markup' => $code);

  return $block;
}


/**
 *
 * Generates renderable (table of content) code for each child.
 *
 * @param array $child
 *   A book page child array
 * @param integer $nodeId
 *   The ID of the node currently being visited
 *
 */ 
function _process_child($child, $nodeId, $level) {
  global $language;
  $defaultLanguage = language_default();
  $paddingLeft = $level * 10;
  $path = $child['link']['link_path'];
  $heading = $child['link']['link_title'];
  $nicePath = drupal_get_path_alias($path, $language->language);
  if($language->language != $defaultLanguage->language)
    $nicePath = $language->language . "/" . $nicePath;
  $metadata = "href='/$nicePath'";
  if($path == 'node/' . $nodeId)
    $metadata = "style='padding-left: " . $paddingLeft . "px;  display:block; background-color:#e6e6fa; color:#ff0000;'";
  else
    $metadata = "href='/$nicePath' style='padding-left: " . $paddingLeft . "px;  display:block'";
  $code = "<a $metadata>" . $heading . "</span></a></p>";
  return $code;
}


/**
 * Checks to see if current node is part of a book.
 *
 * @return array
 *   book portion of the node array if it is part of a book, FALSE if not
 */
function lbd_wiki_is_book_node() {
  if(!labdoo_lib_node_is_type(array('book'), FALSE))
    return FALSE;
  $node = menu_get_object();
  if ($node && isset($node->book)) {
    return $node->book;
  }
  return FALSE;
}


/**
 * Implements hook_menu_local_tasks_alter
 *
 */
function lbd_wiki_menu_local_tasks_alter(&$data) {
  global $user;
  // Hide Outline tab (reordering of book hierarchy is provided in the TOC block)
  if(sizeof($data['tabs']) > 0) {
    foreach($data['tabs'][0]['output'] as $key => $value) {
      if($value['#link']['path'] == "node/%/outline") {
        unset($data['tabs'][0]['output'][$key]);
      }
      if($value['#link']['path'] == "node/%/revisions") {
        $userRoles = array_values($user->roles);
        if(!in_array('book writer', $userRoles) && !in_array('administrator', $userRoles)) {
          unset($data['tabs'][0]['output'][$key]);
        }
      }
    }
    if(sizeof($data['tabs'][0]['output']) == 1) {  // Hide the redundant View tab 
      foreach($data['tabs'][0]['output'] as $key => $value) {
        if($value['#link']['path'] == "node/%/view") {
          unset($data['tabs'][0]['output'][$key]);
        }
      }
    }
  }
  return;
}


/**
 * Implements hook_form_FORM_ID_alter
 *
 */
function lbd_wiki_form_node_form_alter(&$form, &$form_state) {
  if (book_type_is_allowed($form['#node']->type)) {
    // Remove the "none" option.
    unset($form['book']['bid']['#options'][0]);
  }
}


/**
 * Validation of a wiki page content. 
 * Approach: validate that it is XML compliant.
 * This validation is specially important because 
 * if the wiki page written is not XML compliant,
 * the wiki backup system will not work.
 */


/**
 * Validates a wiki body
 *
 * @param string $wikiText
 *   The body of a wiki page
 * @return int
 *   The number of incorrections (0 if the validation succeeded)
 *
 */ 
function _validate_wiki_body($wikiText) {
  $numErrors = 0;
  $okErrorCodes = array();
  array_push($okErrorCodes, 0);

  libxml_use_internal_errors(true);

  $xmlstr = "<__wikibook__>" . $wikiText . "</__wikibook__>"; # Add dummy initial markup as the parser expects 
  $doc = simplexml_load_string($xmlstr);
  $wikiLines = explode("\n", $xmlstr);
  $errors = libxml_get_errors();

  if(count($errors) > 0){
    foreach ($errors as $error) {
      if(in_array($error->code, $okErrorCodes))
        continue;
      drupal_set_message(_display_wiki_error($error, $wikiLines));
      $numErrors++;
    }
    libxml_clear_errors();
  }

  return $numErrors;
}


/**
 * Returns a formatted wiki validation error
 *
 * @param string $error
 *   The error
 * @param array $wikiLines 
 *   An array of the lines of the wiki text 
 * @return string 
 *   The ready to display formatted error
 *
 */ 
function _display_wiki_error($error, $wikiLines) {

    switch ($error->level) {
        case LIBXML_ERR_WARNING:
            $return = "(Warning) ";
            break;
         case LIBXML_ERR_ERROR:
            $return = "";
            break;
        case LIBXML_ERR_FATAL:
            $return = "";
            break;
    }

    $return .= "Line: $error->line | Column: $error->column: ";
    $return .= trim($error->message) . "<br/>";
    $code = $wikiLines[$error->line - 1];
    $code = str_replace("<__wikibook__>", "", $code);   
    $code = str_replace("</__wikibook__>", "", $code);
    $return .= "<pre>" . check_plain($code) . "</pre>";

#   if ($error->file) {
#     $return .= "\n  File: $error->file";
#   }

    return "$return";
}


/*
 * Call back function to validate wiki text
 */
function _validate_wiki_text($form, &$form_state) {
  $lang = $form['body']['#language'];
  $body = $form['body'][$lang][0]['value']['#value'];
  $numErrors = _validate_wiki_body($body);
  if($numErrors > 0)
    form_set_error('title', t('Your wiki text has @numerr formatting errors, please review and correct them.', 
                              array('@numerr' => $numErrors)));
  return;
}


/*
 * Implementation of hook_form_alter
 */
function lbd_wiki_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'book_node_form') {
    $form['#validate'][] = '_validate_wiki_text';
  }

  return;
} 

