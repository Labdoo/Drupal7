<?php

/**
 * @defgroup labdoodootrip LabdooDootrip: Module implementing Labdoo's Dootrip System
 *
 * This module implements the Labdoo Dootrip System
 *
 */


/**
 * @file
 * Main module file for the Labdoo Dootrip module 
 *
 * @ingroup labdoodootrip
 *
 */

/**
 * Given a source node and linked field in it, update the corresponding destination 
 * field. A linked field in a source node is herein understood as an entity 
 * field linked to other nodes (called the destination nodes) which in turn
 * have an entity field linked back to the source node. An example of such type of
 * relationships are the dootrip and dooject fields found in the dooject and dootrip 
 * node types, respectively.
 *
 * @param node $node
 *   The source node
 * @param string $src_field
 *   The linked field in the source node
 * @param string $dst_field
 *   The linked field in the destination node
 * @param string $src_name
 *   A user friendly name for the source field
 * @param string $dst_name
 *   A user friendly name for the destination field
 */
function _update_linked_nodes($node, $src_field, $dst_field, $src_name, $dst_name, $new=FALSE) {

  // If this call comes from a node view path (see function lbd_dootrip_node_view),
  // skip the rest of work.
  if(array_key_exists('content', $node)) 
    return;

  $dstListNew = field_get_items('node', $node, $src_field);

  if($new) {
    $dstListOld = array();
  }
  else {
    $srcLoaded = node_load($node->nid);
    $dstListOld = field_get_items('node', $srcLoaded, $src_field);
  }

  if($dstListNew == $dstListOld)
    return; 

  // Try to add this source to the destinations:
  // For each dst added by the newly submitted form, if
  // this src is not assigned to such dst, then assign it.
  foreach($dstListNew as $key => $dstNode) {
    $dstLoaded = node_load($dstNode['target_id']);
    $wDstNode = entity_metadata_wrapper('node', $dstLoaded);
    $srcList = $wDstNode->$dst_field->value();
    if(!$srcList) 
      $srcList = array();
    if($new || !in_array($srcLoaded, $srcList)) {
      drupal_set_message("The " . $src_name . " '" . $node->title . "'  was added to the " . $dst_name . " '" . $dstLoaded->title . "'", 'status', FALSE);
      $srcList[] = $node;
      $wDstNode->$dst_field->set($srcList);
      field_attach_update('node', $dstLoaded);
    }
  }

  // Try to remove this source from the destinations:
  // For each dst removed by the newly submitted form, if
  // this src is assigned to such dst, then unassign it.
  if(!$new && !empty($dstListOld)) { 
    foreach($dstListOld as $key => $dstNode) {

      if(in_array($dstNode, $dstListNew))
        continue;      

      $dstLoaded = node_load($dstNode['target_id']);
      $wDstNode = entity_metadata_wrapper('node', $dstLoaded);
      $srcList = $wDstNode->$dst_field->value();
      if(!$srcList)
        return;

      foreach($srcList as $key => $srcNode) {
        if($srcNode->nid == $srcLoaded->nid) {
          unset($srcList[$key]);
          drupal_set_message("The " . $src_name . " '" . $node->title . "'  was removed from the " . $dst_name . " '" . $dstLoaded->title . "'", 'status', FALSE);
          $wDstNode->$dst_field->set($srcList);
          field_attach_update('node', $dstLoaded);
        }
      }
    }
  }

  return;
}


/**
 * Implementation of hook_node_update
 *
 * Note: the calling of _update_linked_nodes would generate an infinite loop
 * if they were implemented in the hook_node_presave.
 *
 */
function lbd_dootrip_node_update($node) {

  if($node->type == 'laptop') 
    _update_linked_nodes($node, 'field_dootrips', 'field_laptops', 'dooject', 'dootrip', FALSE); 

  if($node->type == 'dootrip') 
    _update_linked_nodes($node, 'field_laptops', 'field_dootrips', 'dootrip', 'dooject', FALSE); 

  return;
}


/**
 * Implementation of hook_node_insert
 *
 */
function lbd_dootrip_node_insert($node) {

  if($node->type == 'laptop') 
    _update_linked_nodes($node, 'field_dootrips', 'field_laptops', 'dooject', 'dootrip', TRUE); 

  if($node->type == 'dootrip') 
    _update_linked_nodes($node, 'field_laptops', 'field_dootrips', 'dootrip', 'dooject', TRUE); 

  return;
}


/**
 * _calculate_dootrip_weight
 *
 * @param node $node
 *   A dootrip node
 * @return A message indicating the weight of all the doojects associated with the dootrip
 *
 */
function _calculate_dootrip_weight($node) {
  $weight = 0;
  $suffix = "";
  $prefix = "";

  $wNode = entity_metadata_wrapper('node', $node);
  $doojectsList = $wNode->field_laptops->value();
  if(!$doojectsList) {
    return t("No doojects linked to this dootrip yet");
  }

  foreach($doojectsList as $doojectNode) {
    if(!key_exists('nid', $doojectNode))
      continue;
    $doojectLoaded = node_load($doojectNode->nid);
    $wDoojectLoaded = entity_metadata_wrapper('node', $doojectLoaded);
    $doojectWeight = $wDoojectLoaded->field_dooject_weight->value();
    if(!$doojectWeight) {
      $suffix = t("More than ");
      $prefix = t(" (Please update the weight field in all the doojects for an accurate weight estimation)");
      continue;
    }
    $weight = $weight + $doojectWeight;
  }

  if($weight == 0) 
    return t("Please update the weight of each individual dooject");
  else
    return t($suffix . $weight . " Kgms" . $prefix);
  return $weight;
}


/*
 * Implementation of hook_node_view
 *
 */
function lbd_dootrip_node_view($node, $view_mode) {

  // The field 'field_dootrip_weight' is a computed type field
  // that depends on values from other nodes' fields. Due to a limitation
  // of the computed_field module, this type of depencies don't get
  // correctly updated. To force an update, we clean the field cache 
  // Note: instead of cleaning the cache (which slows performance), we opt
  // for just resaving this node, which effectively forces the update.
  if($node->type == 'dootrip') 
    node_save($node);
//    field_cache_clear();
  return;
}

