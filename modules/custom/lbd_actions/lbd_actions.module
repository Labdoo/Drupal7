<?php

/**
 * @defgroup labdooaction LabdooAction: Module implementing Labdoo's Action System
 *
 * Implements visualization mechanisms to help display the activities taking place within the Labdoo system. 
 *
 */


/**
 * @file
 * Main module file for the Labdoo Action module 
 *
 * @ingroup labdooaction
 *
 */


/*
 * Users contributions can be modeled wth a graph of relationships connecting users and Labdoo ojects.
 * A user may contribute to one Labdoo object directly or indirectly.
 *   Example of direct contribution:
 *     A user tags a dooject: user <--> dooject
 *   Example of indirect contribution:
 *     A user is related to a dootrip via a dooject if that user has contributed to a dooject
 *     which is associated to the dootrip: users <--> dooject <--> dootrip
 *
 * The following functions help identify potential contribution relationships between a user
 * and each of the Labdoo objects.
 *
 */

/**
 * Checks if a user is contributing to a given dooject.
 *
 * @param integer $userId The ID of the user
 * @param node $node The dooject's node
 *
 * @return string
 *   Returns one of the following values indicating the way in which a 
 *   user contributes to the dooject:
 *     'manager' if the user is a manager of the dooject
 *     'tagger' if the user is a tagger of the dooject 
 *     'dootrip' if the user contributes via a dootrip
 *     'none' if the user does not contribute
 *
 */
function lbd_actions_user_contributes_dooject($userId, $node) {
  $nid = $node->nid;

  $contributerId = labdoo_lib_get_field($node, 'field_manager', 'node', 'target_id');
  if($userId == $contributerId) 
    return "manager";

  $contributerId = labdoo_lib_get_field($node, 'field_tagger', 'node', 'target_id');
  if($userId == $contributerId) 
    return "tagger";

  $query = "SELECT entity_id FROM field_data_field_dootrips WHERE (field_dootrips_target_id IN 
            (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)) 
            AND (entity_id=:nid)";
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dootrip';

  return 'none';
}


/**
 * Checks if a user is contributing to a given dootrip.
 *
 * @param integer $userId The ID of the user
 * @param node $node The dootrip's node
 *
 * @return string
 *   Returns one of the following values indicating the way in which a 
 *   user contributes to the dootrip:
 *     'dootripper' if the user is the actual dootripper
 *     'dooject' if the user contributes via a dooject
 *     'none' if the user does not contribute
 *
 */
function lbd_actions_user_contributes_dootrip($userId, $node) {
  $nid = $node->nid;

  $query = "SELECT entity_id FROM field_data_field_dootripper_s_ WHERE (field_dootripper_s__target_id=:uid AND entity_id=:nid)";
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dootripper';
  $query = "SELECT entity_id FROM field_data_field_laptops WHERE (field_laptops_target_id IN 
            (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR field_laptops_target_id IN 
            (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid)) 
            AND (entity_id=:nid)";
   $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dooject';
  return 'none';
}


/**
 * Checks if a user is contributing to a given edoovillage. 
 *
 * @param integer $userId The ID of the user
 * @param node $node The edoovillage's node 
 *
 * @return string
 *   Returns one of the following values indicating the way in which a 
 *   user contributes to the edoovillage:
 *     'dooject' if the user contributes via a dooject
 *     'dootrip' if the user contributes via a dootrip
 *     'manager' if the user is a manager of this edoovillage
 *     'none' if the user does not contribute
 *
 */
function lbd_actions_user_contributes_edoovillage($userId, $node) {
  $nid = $node->nid;

  $query = "SELECT entity_id FROM field_data_field_project_manager_s_ WHERE (field_project_manager_s__target_id=:uid AND entity_id=:nid)";
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'manager';
  $query = "SELECT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
            (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
             entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid)) AND
            (field_edoovillage_destination_target_id=:nid)"; 
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dooject';
  $query = "SELECT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
            (entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
             entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid))) AND
            (field_edoovillage_destination_target_id=:nid)"; 
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dootrip';
  return 'none';
}


/**
 * Checks if a user is contributing to a given hub.
 *
 * @param integer $userId The ID of the user
 * @param node $node The hub's node
 *
 * @return string
 *   Returns one of the following values indicating the way in which a 
 *   user contributes to the hub:
 *     'dooject' if the user contributes via a dooject
 *     'dootrip' if the user contributes via a dootrip
 *     'manager' if the user is a manager of this hub
 *     'none' if the user does not contribute
 *
 */
function lbd_actions_user_contributes_hub($userId, $node) {
  $nid = $node->nid;

  $query = "SELECT entity_id FROM field_data_field_hub_manager_s_ WHERE (field_hub_manager_s__target_id=:uid AND entity_id=:nid)";
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'manager';
  $query = "SELECT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
            (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
             entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid)) AND
            (field_hub_laptop_target_id=:nid)"; 
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dooject';
  $query = "SELECT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
            (entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
             entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid))) AND
            (field_hub_laptop_target_id=:nid)"; 
  $result = db_query($query, array(':uid' => $userId, ':nid' => $nid))->fetchField();
  if($result == $nid)
    return 'dootrip';
  return 'none';
}


/**
 * Checks if a new activity being created in a given city
 * should be streamed in the action feed or not.
 * If the city of the new action is the same as the city of 
 * the last action, then do not stream it.
 *
 * @param string $newCity
 *   The name of the city where the new activity is created
 *
 * @return boolean
 *   TRUE if it must be streamed, FALSE otherwise
 *
 */
function _must_be_streamed($newCity) {

  $query = "SELECT city FROM location WHERE 
              lid=(SELECT lid FROM location_instance WHERE 
                nid=(SELECT nid FROM node WHERE type='action' and 
                  nid=(SELECT max(nid) FROM node WHERE type='action')))";
  $lastCity = db_query($query)->fetchField();
  if($newCity != $lastCity)
    $streamIt = TRUE;
  else
    $streamIt = FALSE;
  return $streamIt;
}


/**
 * Creates an action node. Usually this subroutine is invoked upon
 * creating one of the Labdoo objects.
 *
 * @param string $actionType
 *   The type of action, one of: {Dooject, Dootrip, Edoovillage, Hub}
 * @param string $title
 *   The title of the action in plain text
 * @param string $body
 *   The body of the action in full html format
 * @param array $location
 *   The location of the action
 * @param boolean $streamIt
 *   Whether this action should be streamed in the action feed or not
 *
 */
function _create_activity_node($actionType, $title, $body, $location, $streamIt, $hubId=NULL, $edoovillageId=NULL)
{
  global $user; 
  $node = new stdClass();
  $node->type = 'action';
  node_object_prepare($node);

  $node->title = $title;
  $node->language = LANGUAGE_NONE;
  $node->field_action_type[$node->language][0]['value'] = $actionType;

  $node->locations[0]['city'] = $location['city'];
  $node->locations[0]['country'] = $location['country'];
  if(array_key_exists('latitude', $location))
    $node->locations[0]['latitude'] = $location['latitude'];
  if(array_key_exists('longitude', $location))
    $node->locations[0]['longitude'] = $location['longitude'];
  $node->locations[0]['inhibit_geocode'] = TRUE;

  $node->body[$node->language][0]['value']   = $body;
  $node->body[$node->language][0]['summary'] = '';
  $node->body[$node->language][0]['format']  = 'full_html';

  if($streamIt)
    $node->field_stream_it[$node->language][0]['value'] = 1;
  else
    $node->field_stream_it[$node->language][0]['value'] = 0;

  $node->field_labdooer_action[$node->language][] = array(
    'target_id' => $user->uid,
    'target_type' => 'user',
  );

  if($hubId != NULL) {
    $node->field_hub_action[$node->language][] = array(
      'target_id' => $hubId,
      'target_type' => 'node',
    );
  }

  if($edoovillageId != NULL) {
    $node->field_edoovillage_action[$node->language][] = array(
      'target_id' => $edoovillageId,
      'target_type' => 'node',
    );
  }

  node_save($node);
}


/*
 * Implementation of hook_node_insert
 *
 */
function lbd_actions_node_insert($node) {
  _generate_labdoo_action($node);
  return;
}


/*
 * Implementation of hook_node_update
 *
 */
function lbd_actions_node_update($node) {
  _generate_labdoo_action($node);
  return;
}


/*
 * _generate_labdoo_action 
 *
 */
function _generate_labdoo_action($node) {
  $hubId = $edoovillageId = NULL;

  if($node->type != 'laptop' && $node->type != 'edoovillage' && $node->type != 'hub' && $node->type != 'dootrip') 
    return;

  if($node->type == 'dootrip') {
    $allLocations = field_get_items('node', $node, 'field_origin_of_the_trip');
    $location = $allLocations[0];
  }
  else 
    $location = $node->locations[0];

  // Compute location where the action takes place
  $thisCountry = labdoo_country_code2name($location['country']);
  $thisCity = $location['city'];

  if($node->type == 'laptop') {

    $actionType = "Dooject";
    $hubId = labdoo_lib_get_field($node, 'field_hub_laptop', 'node', 'target_id');
    $edoovillageId = labdoo_lib_get_field($node, 'field_edoovillage_destination', 'node', 'target_id');

    if(!property_exists($node, 'original')) { // Dooject created 
      $title = "Laptop " . $node->title . " was tagged in " . $thisCity . ", " . $thisCountry; 
      // Note: We can't use drupal_get_path_alias here because the node has not been fully created yet.
      //       We play a small trick however to ensure that the language prefix is present:
      //         - By omitting the first slash / in the URL, we are generating a URL of the form
      //           $languageCode/content/node/$nodeId
      //         - By adding ".." in front of the URL, the final URL becomes: $languageCode/content/../node/$nodeId
      $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/laptop-simple.png" width="20">';
    }
    else { // Dooject updated
      $newStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value'); 
      $previousStatus = labdoo_lib_get_field($node->original, 'field_status', 'node', 'value');
      if($previousStatus == $newStatus)
        return;
      if($newStatus == "S4" || $newStatus == "T1") {
        // Take the location from the edoovillage since the dooject
        // location may still not be updated at the time this hook is called
        $edoovillageNode = node_load($edoovillageId);
        $thisCountryCode = $edoovillageNode->locations[0]['country'];
        $thisCountry = labdoo_country_code2name($thisCountryCode);
        $thisCity = $edoovillageNode->locations[0]['city'];
        $thisLatitude = $edoovillageNode->locations[0]['latitude'];
        $thisLongitude = $edoovillageNode->locations[0]['longitude'];

        $location = array();
        $location['city'] = $thisCity;
        $location['country'] = $thisCountryCode;
        $location['latitude'] = $thisLatitude;
        $location['longitude'] = $thisLongitude;
      }

      if(($previousStatus == "S0" or $previousStatus == "S1") and ($newStatus == "S2" or $newStatus == "S3")) { 
        $title = "Laptop " . $node->title . " was sanitized in " . $thisCity . ", " . $thisCountry; 
        $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/laptop-sanitized.png" width="31">';
      }
      else if($newStatus == "S4") {
        $title = "Laptop " . $node->title . " was delivered to an edoovillage in " . $thisCity . ", " . $thisCountry; 
        $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/laptop-delivered.png" width="31">';
      }
      else if($newStatus == "T1") { 
        $title = "Laptop " . $node->title . " has started its journey to an edoovillage in " . $thisCity . ", " . $thisCountry; 
        $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/laptop-dootripped.png" width="34">';
      }
      else if($newStatus == "S6") { 
        $title = "Laptop " . $node->title . " has been recycled"; 
        $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/laptop-recycled.png" width="27">';
      }
      else // don't create any activity
        return;
    }
  }
  else if($node->type == 'edoovillage') {
    if(property_exists($node, 'original')) 
      return;
    $actionType = "Edoovillage";
    $hubId = labdoo_lib_get_field($node, 'field_hub', 'node', 'target_id');
    $edoovillageId = $node->nid;
    $title = "Edoovillage was created in " . $thisCity . ", " . $thisCountry; 
    $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/edoovillage.png" width="30">';
  }
  else if($node->type == 'hub') {
    if(property_exists($node, 'original')) 
      return;
    $actionType = "Hub";
    $hubId = $node->nid; 
    $title = "Hub was created in " . $thisCity . ", " . $thisCountry; 
    $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/hub.png" width="30">';
  }
  else if($node->type == 'dootrip') {
    $actionType = "Dootrip";
    $doojectId = labdoo_lib_get_field($node, 'field_laptops', 'node', 'target_id');
    $titleSplit = explode("- ", $node->title);
    if(property_exists($node, 'original')) { // Dootrip is updated 
      // This dootrip already exists. Only report new activity if 
      // doojects have been added to it.
      $prevDoojectId = labdoo_lib_get_field($node->original, 'field_laptops', 'node', 'target_id');
      if($prevDoojectId != NULL or $doojectId == NULL) 
        return;
      $title = "Dootrip " . $titleSplit[1] . " was updated";
    }
    else { // Dootrips is created
      $title = "Dootrip " . $titleSplit[1] . " was created";
    }
    if($doojectId != NULL) {
      $doojectNode = node_load($doojectId);
      $hubId = labdoo_lib_get_field($doojectNode, 'field_hub_laptop', 'node', 'target_id');
      $edoovillageId = labdoo_lib_get_field($doojectNode, 'field_edoovillage_destination', 'node', 'target_id');
    }
    $body = '<a href="../node/' . $node->nid . '">' . $title . '...</a><img src="/profiles/labdoo/files/pictures/dootrip.png" width="30">';
  }

  $streamIt = _must_be_streamed($thisCity); 
  _create_activity_node($actionType, $title, $body, $location, $streamIt, $hubId, $edoovillageId);
  return;
}


/*
 * Implementation of hook_node_view
 *
 */
function lbd_actions_node_view($node, $view_mode) {
  global $user;

  // This is ugly, but the search page loads the nodes themselves,
  // and we don't want to display all the messages emitted 
  // by this call.
  $pageUri = request_uri();
  if(strpos($pageUri, "/search/node/") !== false)
    return;

  /*
   * Upon viewing a node, if the user is logged in, find out if the user
   * has made a contribution to that node's object and if so,
   * let the user know. This helps users know that they are related
   * to the object they are currently using and provides a small explanation
   * of how that relation occurred.
   * Users could be related to an object through several paths (e.g., a user
   * may have contributed to an edoovillage by tagging a dooject delivered to
   * that edoovillage, by dootripping a dooject to that edoovillage, etc.).
   * In that case, keep it simple and just present the first relation found.
   */

  if (!user_is_logged_in()) 
    return;

  $userId = $user->uid;

  if($node->type == 'laptop') {

    $reason = lbd_actions_user_contributes_dooject($userId, $node);

    if($reason == "manager") {
      drupal_set_message(t("You are this dooject's manager."), 'status', FALSE);
      return;
    }
    else if($reason == "tagger") {
      drupal_set_message(t("You have contributed to this dooject by tagging it."), 'status', FALSE);
      return;
    }
    else if($reason == "dootrip") {
      drupal_set_message(t("You have contributed to this dooject by providing a dootrip."), 'status', FALSE);
      return;
    }
    return;

  }
  else if($node->type == 'dootrip') {

    $reason = lbd_actions_user_contributes_dootrip($userId, $node);

    if($reason == "dootripper") {
      drupal_set_message(t("You are a traveler in this dootrip."), 'status', FALSE);
      return;
    }
    else if($reason == "dooject") {
      drupal_set_message(t("You have contributed to a dooject that is transported by this dootrip."), 'status', FALSE);
      return;
    }

    return;

  }
  else if($node->type == 'edoovillage') {

    $reason = lbd_actions_user_contributes_edoovillage($userId, $node);

    if($reason == "manager") {
      drupal_set_message(t("You are a manager of this edoovillage."), 'status', FALSE);
      return;
    }
    else if($reason == "dooject") {
      drupal_set_message(t("You have contributed to this edoovillage with at least one dooject."), 'status', FALSE);
      return;
    }
    else if($reason == "dootrip") {
      drupal_set_message(t("You have contributed to this edoovillage by at least providing one dootrip."), 'status', FALSE);
      return;
    }
    return;

  }
  else if($node->type == 'hub') {

    $reason = lbd_actions_user_contributes_hub($userId, $node);

    if($reason == "manager") {
      drupal_set_message(t("You are a manager of this hub."), 'status', FALSE);
      return;
    }
    else if($reason == "dooject") {
      drupal_set_message(t("You have contributed to this hub with at least one dooject."), 'status', FALSE);
      return;
    }
    else if($reason == "dootrip") {
      drupal_set_message(t("You have contributed to this hub by at least providing one dootrip."), 'status', FALSE);
      return;
    }
    return;

  }

  return;
}

