<?php

/**
 * @defgroup labdooteam labdooTeam: Implementation of Labdoo Teams
 *
 * This module implements Labdoo Teams based on Organic Groups and other basic building blocks
 *
 */


/**
 * @file
 * Main file for the Labdoo Team module
 *
 * @ingroup labdooteam 
 */


/*
 * ==========
 * VIEWS CODE
 * ==========
 */

/**
 * Implementation of hook_views_api
 */
function lbd_teams_views_api() {
  return array(
    'api' => 3.0,
  );
} 


/**
 * Implementation of hook_views_default_views
 */
function lbd_teams_views_default_views() {

  // Teams view
  include 'lbd_teams_views_teams.inc';
  $views[$view->name] = $view;

  // User's teams view
  include 'lbd_teams_views_user_teams.inc';
  $views[$view->name] = $view;

  // Team content in a block
  include 'lbd_teams_views_team_content_block.inc';
  $views[$view->name] = $view;

  // Team content in a page 
  include 'lbd_teams_views_team_content_page.inc';
  $views[$view->name] = $view;

  // All teams content in a page
  include 'lbd_teams_views_content_page.inc';
  $views[$view->name] = $view;

  // Calendars
  include 'lbd_teams_views_calendar.inc';
  $views[$view->name] = $view;

  // Team dashboard
  include 'lbd_teams_views_dashboard.inc';
  $views[$view->name] = $view;

  return $views;
}


/**
 * render_calendar_switcher 
 *
 */
function render_calendar_switcher()
{
  global $language;

  if ($language->language != 'en')
    $lang = '/' . $language->language;
  else
    $lang = '';

  $path = drupal_get_path_alias(current_path());
    
  if(stripos($path, "calendar/month")) {
      $url0 = "Month";
      $url1 = "Week";
      $url2 = "Day";
      $url3 = "Year";
  }

  if(stripos($path, "calendar/week")) {
      $url0 = "Week";
      $url1 = "Month";
      $url2 = "Day";
      $url3 = "Year";
  }

  if(stripos($path, "calendar/day")) {
      $url0 = "Day";
      $url1 = "Month";
      $url2 = "Week";
      $url3 = "Year";
  }
    
  if(stripos($path, "calendar/year")) {
      $url0 = "Year";
      $url1 = "Month";
      $url2 = "Week";
      $url3 = "Day";
  }

  $switchTitle = t('Select calendar view');

  $code = "<p><strong><span style='color:#ff3300;'>$switchTitle</span></strong></p>
           <form>
           <select name='URL' onchange='window.location.href=this.form.URL.options[this.form.URL.selectedIndex].value'>
           <option value='$lang/$path/../$url0'>$url0</option>
           <option value='$lang/$path/../$url1'>$url1</option>
           <option value='$lang/$path/../$url2'>$url2</option>
           <option value='$lang/$path/../$url3'>$url3</option>
           </select>
           </form>";

  print($code);
  return;
}


/**
 * Implementation of hook_node_validate 
 */
function lbd_teams_node_validate($node, $form, &$form_state) {

  if ($node->type == 'team_task') {
    $items = field_get_items('node', $node, 'field_task_assigned_to');
    $userId = $items[0]['target_id'];
    if(!$userId)
      return; // Let the general validation routine take care of this 
    $items = field_get_items('node', $node, 'og_group_ref');
    $groupId = $items[0]['target_id'];
    if(!$groupId)
      return; // Let the general validation routine take care of this 
    $userNode = user_load($userId);
    if (!og_is_member('node', $groupId, 'user', $userNode)) {
      form_set_error('field_task_assigned_to', t("Please ensure that the user assigned to this task is a member of the task's team"));
    }
  }

  return;
} 


/**
 * Returns the group ID of the page being displayed, if any
 *
 * @return The group ID or NULL if the page is not associated with any group ID 
 *
 */
function lbd_teams_page_group_id() {

  if(!empty($_GET['og_group_ref'])) 
    $groupId = $_GET['og_group_ref'];
  else {
    if (arg(0) != 'node' || !is_numeric(arg(1))) 
      return NULL;
    $groupId = arg(1);
    $node = node_load($groupId);
    if(!$node)
      return NULL;
    if($node->type != "team" and $node->type != "team_page" and $node->type != "event" and $node->type != "team_task") 
      return NULL;
    if($node->type != "team"){
      $items = field_get_items('node', $node, 'og_group_ref');
      $groupId = $items[0]['target_id'];
    }
  }
  return $groupId;
}


/**
 * Renders the team actions block 
 *
 * @return Code rendering the team actions block
 *
 */
function labdoo_render_team_actions() {
  $path = drupal_get_path_alias(current_path());
  global $language;
  global $user;

  // Take care of the cases described in [*]
  if(strcmp($path, "content/team-members") == 0) 
    $groupId = $_GET['t'];
  else if(strcmp($path, "teams-dashboard") == 0) 
    $groupId = $_GET['og_group_ref_target_id'][0];
  else
    $groupId = lbd_teams_page_group_id();

  if ($language->language != 'en')
    $lang = '/' . $language->language;
  else
    $lang = '';

  $homePath = $lang . "/" . drupal_get_path_alias("node/$groupId");

  // For some special groups, do not allow write access
  $members = lbd_teams_get_team_members($groupId);
  $teamName = lbd_nodeid2title($groupId);
  if(!in_array($user->uid, $members))
    $noWritingRights = TRUE;
  else if($teamName == "Global" && $user->name != 'Labdoo')
    $noWritingRights = TRUE;
  else
    $noWritingRights = FALSE;

  if($noWritingRights) {
    $code = "
<p><strong><span style='color:#009900; font-size:16px;'>Team " . $teamName . "</span></strong></p>
<img src='/profiles/labdoo/files/pictures/home.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$homePath'>" . t("About this team") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/wall.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$homePath/activities'>" . t("View wall") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/calendar_icon.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/node/$groupId/calendar/month'>" . t("View calendar") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/search.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/teams-dashboard?og_group_ref_target_id%5B%5D=" . $groupId . "'>" . t("Search inside this team") . "</span></a></p>
    ";
  }
  else {
    $code = "
<p><strong><span style='color:#009900; font-size:16px;'>Team " . $teamName . "</span></strong></p>
<img src='/profiles/labdoo/files/pictures/home.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$homePath'>" . t("About this team") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/wall.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$homePath/activities'>" . t("View wall") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/conversation.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/node/add/team-page?og_group_ref=$groupId'>" . t("Start conversation") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/check.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/node/add/team-task?og_group_ref=$groupId'>" . t("Start task") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/community.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/node/add/event?og_group_ref=$groupId'>" . t("Start event") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/my-events.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/user/$user->uid/my-events'>" . t("My events") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/calendar_icon.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/node/$groupId/calendar/month'>" . t("View calendar") . "</span></a></p>
<img src='/profiles/labdoo/files/pictures/search.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/teams-dashboard?og_group_ref_target_id%5B%5D=" . $groupId . "'>" . t("Search inside this team") . "</span></a></p>
    ";
  }

  // Additional code for members
  if(og_is_member('node', $groupId)) {
    $code = $code . "
<img src='/profiles/labdoo/files/pictures/team-members.png' style='width: 22px; height: 21px;'/>&nbsp;
<a href='$lang/content/team-members?t=" . $groupId . "'>" . t("Team members") . "</span></a></p>
<img src='/misc/feed.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/group/node/$groupId/unsubscribe'>" . t("Unsubscribe from this team") . "</span></a></p>
<br>
    ";
  }
  else {
    $code = $code . "
<img src='/misc/feed.png' style='width: 20px; height: 21px;'/>&nbsp;
<a href='$lang/group/node/$groupId/subscribe'>" . t("Subscribe to this team") . "</span></a></p>
    ";
  }

  return $code;
}


/**
 * Implements the visibility filter of the team actions block 
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_team_actions() {
  $path = drupal_get_path_alias(current_path());
  $groupId = 0;
  global $user;

  // Three mutually exclusive cases to consider: [*]
  //   - This is the 'Team Members' page
  //   - This is the 'Search inside this team' page
  //   - This is a page associated with a group
  // Only in these cases return TRUE
 
  if(strcmp($path, "content/team-members") == 0) { 
    if(empty($_GET['t'])) 
      return FALSE;
    $groupId = $_GET['t'];
  }
  else if(strcmp($path, "teams-dashboard") == 0) { 
    if(empty($_GET['og_group_ref_target_id']))
      return FALSE;
    $groupId = $_GET['og_group_ref_target_id'][0];
  }
  else {
    $groupId = lbd_teams_page_group_id();
  }

  if($groupId == NULL && !$groupId)
    return FALSE;

  if(!is_numeric($groupId)) 
    return FALSE;

  return TRUE;
}


/**
 * Implementation of hook_node_presave
 *
 */
function lbd_teams_node_presave($node) {
  // If it's a task and has a date, create an event too
  if($node->type == 'team_task' && labdoo_lib_get_field($node, 'field_task_due_date', 'node', 'value')) {
    $eventTitle = $node->title . " (Event)";
    $nodeEventId = 0;
    // If it has an associated event, get its node ID
    if(property_exists($node, 'original')) {
      $previousEventTitle = $node->original->title . " (Event)";
      $nodeEventId = lbd_title2nodeid($previousEventTitle, 'event');
    }
    // If there is no associated event, create one
    if(!property_exists($node, 'original') || !$nodeEventId) {
      $newNodeEvent = new stdClass();
      $newNodeEvent->type = 'event';
      node_object_prepare($newNodeEvent);
      $newNodeEvent->title = $eventTitle;
      $newNodeEvent->language = LANGUAGE_NONE;
      $newNodeEvent->created = time();
      $newNodeEvent->changed = $newNodeEvent->created;
      $newNodeEvent->status = 1;
      $newNodeEvent->promote = 0;
      $newNodeEvent->sticky = 0;
      $newNodeEvent->format = 2;
      $newNodeEvent->uid = $node->uid;
      $newNodeEvent->field_event_date = $node->field_task_due_date;
      $newNodeEvent->body = $node->body;
      $newNodeEvent->og_group_ref = $node->og_group_ref;
      node_save($newNodeEvent);
    }
    else {
      // There is an associated event, just update it
      $nodeEvent = node_load($nodeEventId);
      $nodeEvent->title = $eventTitle;
      $nodeEvent->field_event_date = $node->field_task_due_date;
      $nodeEvent->body = $node->body;
      node_save($nodeEvent);
    }
  }

//  if(!labdoo_lib_node_is_type(array('team_page', 'team_task', 'event')))
//    return;
//
//  $groupId = lbd_teams_page_group_id();
//
//  if($groupId == NULL)
//    return;
//
//  // Add the tag '[TEAM_NAME]' if it has not been added yet
//  $teamTag = "[" . lbd_nodeid2title($groupId) . "]";
//  if(strpos($node->title, $teamTag) === false) 
//    $node->title = $teamTag . " " .  $node->title;

  return;
}


/**
 * Returns the list of members in a team
 *
 * @param integer $teamId The team identifier
 *
 * @return array An array containing the IDs of the users who are members of the team
 *
 */
function lbd_teams_get_team_members($teamId) {
  $members = array();

  $query = "SELECT etid FROM og_membership WHERE entity_type='user' and gid=:teamId";
  $placeHolders[':teamId'] = $teamId;
  $result = db_query($query, $placeHolders);

  foreach($result as $item)
    $members[] = $item->etid;

  return $members;
}


/**
 * Renders a table of the members of a team
 *
 * @param $teamId The team ID 
 *
 * @return The printed table with all members
 *
 */
function lbd_display_team_members($teamId) {
  $numMembersPerPage = 100;
  $pagerId = pager_find_page();

  if($teamId == NULL || !is_numeric($teamId)) 
    return;
  $members = lbd_teams_get_team_members($teamId);

  $header = array('', t('User name'), t('Role'));
  $rows = array();
  for($i = $pagerId * $numMembersPerPage; $i < ($pagerId + 1) * $numMembersPerPage; ++$i) {
    if(!array_key_exists($i, $members))
      break;
    $userId = $members[$i];
    $userNode = user_load($userId);
    $userCodeName = $userNode->name;
    $userRoles = og_get_user_roles('node', $teamId, $userId);
    if(og_user_access('node', $teamId, 'administrator member', $userNode))
      $role = 'admin, member';
    else
      $role = 'member';
    $rows[] = array($i+1, "<a href='../user/" . $userId . "'>" . $userCodeName . "</a>", $role);
  }
 
  pager_default_initialize(count($members), $numMembersPerPage);
  $output = theme('table', array('header' => $header, 'rows' => $rows ));
  $output .= theme('pager');
  print($output);

  return;
}


/**
 * Subscribe a user to a team
 *
 * @param $teamId The team group ID
 * @param $account The user account
 *
 */
function lbd_teams_register_user_to_team($teamId, $account) {
  $values = array(
    'entity_type' => 'user',
    'entity' => $account,
    'state' => OG_STATE_ACTIVE,
  );

  og_group('node', $teamId, $values);
  return;
}


/**
 *
 * Implementation of hook_user_insert
 *
 */
function lbd_teams_user_insert(&$edit, $account, $category) {

  // Register the user to some default Labdoo teams

  // Global group ID is 24
  lbd_teams_register_user_to_team(24, $account);
  
  return;
}


/**
 *
 * Register all users to a team
 *
 * @param @teamId The team group ID
 *
 */
//function lbd_teams_mass_register($teamId) {
//  $query = "SELECT uid FROM users ORDER BY uid ASC";
//  $result = db_query($query);
//
//  foreach($result as $item) {
//    // Skip user zero
//    if($item->uid == 0)
//      continue;
//    $account = user_load($item->uid);
//    if($account) {
//      lbd_teams_register_user_to_team($teamId, $account); 
//      drupal_set_message("Account was registered to the team. User id: " . $item->uid);
//    }
//    else {
//      drupal_set_message("Account was NULL. User id: " . $item->uid);
//    }
//  }
//
//  return;
//}


/**
 * Adds a username to a rendereable code string
 *
 * @param $code The renderable code string
 * @param $user The user node
 *
 * @return The new rendreable code string
 *
 */
function _add_team_follower_to_code($code, $user) {

  if(strpos($code, $user->name) !== false) 
    return $code;
  if($code == "")
    $code = $code . "<a href='../user/" . $user->uid . "'>" . $user->name . "</a>";
  else 
    $code = $code . ", " . "<a href='../user/" . $user->uid . "'>" . $user->name . "</a>";
  return $code;
}


/**
 * Renders a list of users that are following a given conversation/task/event
 *
 * @param $node The node of the team conversation/task/event
 *
 * @return The code with the list of users
 *
 * TODO. Most of the logic in this function is also implemented
 * in _email_team_event(). Need to factor out the code. 
 *
 */
function lbd_print_team_followers($node) {
  $code = ""; 
  $wNode = entity_metadata_wrapper('node', $node);
  if($node->type == 'team_page') {
    $sendAll = $wNode->field_send_to_all_conversation->value();
    $sendToFieldName = 'field_send_to_conversation'; 
  }
  else if($node->type == 'team_task') { 
    $sendAll = $wNode->field_send_to_all_task->value();
    $sendToFieldName = 'field_send_to_task'; 
  }
  else if($node->type == 'event') {
    $sendAll = $wNode->field_send_to_all_event->value();
    $sendToFieldName = 'field_send_to_event'; 
  }
  else
    $sendAll = TRUE;

  if($sendAll) { 
    $code = $code . "<a href='../content/team-members?t=" . lbd_teams_page_group_id() . "'>" . "Everyone in this group</a>";
    return $code;
  }
  else { // Send only to users in the 'send to' field
    if(property_exists($node, $sendToFieldName)) {
      if($node->$sendToFieldName) {
        foreach(field_get_items('node', $node, $sendToFieldName) as $element) {
          $userLoaded = user_load($element['target_id']);
          $code = _add_team_follower_to_code($code, $userLoaded);
        }
      }
    }
  }

  $query = "SELECT uid FROM comment WHERE nid=$node->nid";
  $items = db_query($query);
  foreach($items as $item) {
    $userLoaded = user_load($item->uid);
    $code = _add_team_follower_to_code($code, $userLoaded);
  }

  // Include also the author of the parent node
  $userLoaded = user_load($node->uid);
  $code = _add_team_follower_to_code($code, $userLoaded);

  return($code);
}


function event_user_is_registered($entity_type, $entity_id, $anon_mail = NULL, $uid = NULL, $states = array()) {
  // must provide an UID or anon_mail
  // @todo: better course of action here?
  if (!$anon_mail && !$uid) {
    return FALSE;
  }
  if (empty($states)) {
    $states = registration_get_active_states();
  }

  $query = db_select('registration', 'r')
    ->fields('r', array('registration_id'))
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $entity_type)
    ->condition('state', $states, 'IN');
  if ($anon_mail) {
    // There's a user with this email, check to make sure they're not registered.
    if ($user = user_load_by_mail($anon_mail)) {
      $query->condition(db_or()->condition('anon_mail', $anon_mail)
        ->condition('user_uid', $user->uid));
    }
    else {
      $query->condition('anon_mail', $anon_mail);
    }
  }
  elseif ($uid) {
    $query->condition('user_uid', $uid);
  }
  $results = $query->execute();
  $ids = $results->fetchField();
  $id = ($ids=='' ? 0 : $ids);
  return $id;
}


/**
 * Implements hook_node_view
 *  
 */ 
function lbd_teams_node_view($node, $view_mode) {
  $path = drupal_get_path_alias(current_path());

  // Only for events and ensure that it does not include certain URL paths
  if($node->type == 'event' && 
     strcmp($path, "teams-activities") && strcmp($path, "my-teams-activities") && !preg_match("/(node|content).*activities/", $path)) {
    $regType = labdoo_lib_get_field($node, 'field_registration', 'node', 'registration_type');
    if($regType == 'event_registration' && user_is_logged_in()) {
      global $user;
      $userId = $user->uid;
      // Tell the user where to find the rest of his/her events
      // Tell the user whether he/she is already registered to this event
      $regId = event_user_is_registered('node', $node->nid, NULL, $userId, array('complete'));
      if($regId > 0)
        drupal_set_message(t("You are currently registered to this event. To unregister, go to <a href=\"../registration/$regId/delete?destination=node/$node->nid\">this link</a>"));
      else
        drupal_set_message(t("You are currently not registered to this event. To register, click on the 'Register' tab below."));
      drupal_set_message(t("You can see all your registrations from <a href=\"../user/$userId/myevents\">this page</a>."), 'status', FALSE);
    }
  }
}

