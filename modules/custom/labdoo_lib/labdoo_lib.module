<?php

/**
 * @defgroup labdoolib LabdooLib: Set of core APIs and library functions exposed by Labdoo
 *
 * This module is Labdoo's "Swiss Army Knife" providing the general core functionality
 * and exposing general Labdoo APIs that are not specific to any other more specialized module
 *
 */


/**
 * @file
 * Main file for the Labdoo Library module
 *
 * @ingroup labdoolib 
 */

/**
 *
 * Given a country code, it returns the name of the country
 *
 * @param string @countryCode
 *   Country code
 * @return string
 *   Country name
 *
 */
function labdoo_country_code2name($countryCode) {
  $countryNames = location_get_iso3166_list();
  if(array_key_exists($countryCode, $countryNames))
    return $countryNames[$countryCode];
  else
    return "[country not defined]";
}


/**
 * Generates the title of a dootrip 
 *
 * @param node The node of the dootrip 
 * @param dootripId The numeric identifier of the dootrip 
 *
 * @return a string containing the new title
 *
 */
function _generate_dootrip_title($node, $dootripId) {

  $srcCity = $node->field_origin_of_the_trip['und'][0]['city'];
  $srcCountry = $node->field_origin_of_the_trip['und'][0]['country'];
  $srcCountry = labdoo_country_code2name($srcCountry);

  $dstCity = $node->field_destination_of_the_trip['und'][0]['city'];
  $dstCountry = $node->field_destination_of_the_trip['und'][0]['country'];
  $dstCountry = labdoo_country_code2name($dstCountry);

  $newTitle = $dootripId . " - Dootrip from " . $srcCity . " (" . $srcCountry . ") to " . $dstCity . " (" . $dstCountry . ")";

  return $newTitle;
}


/**
 * Updates the location of a dooject to match that of its 
 * assigned edoovillage
 *
 * @param node Node id of the dooject
 *
 */
function _update_dooject_location_from_edoovillage($node) {

  // Get destination project
  $query = "SELECT field_edoovillage_destination_target_id 
            FROM field_data_field_edoovillage_destination WHERE entity_id=$node->nid";
  $edoovillageId = db_query($query)->fetchField();

  // Get the location id of the destination project
  $query = "SELECT lid FROM location_instance project 
            WHERE vid=(SELECT MAX(vid) FROM location_instance WHERE nid=project.nid) AND (nid=$edoovillageId)";
  $edoovillageLid = db_query($query)->fetchField();

  // Update the location of the laptop to be that of the destination project
  $query = "SELECT vid FROM location_instance project 
            WHERE vid=(SELECT MAX(vid) FROM location_instance WHERE nid=project.nid) AND (nid=$node->nid)";
  $laptopVid = db_query($query)->fetchField();
  $query ="UPDATE location_instance SET lid=$edoovillageLid WHERE vid=$laptopVid AND nid=$node->nid";
  $result = db_query($query);

  return;
}


/**
 * Attempts to estimate latitude and longitude from the names of the city and country
 * by querying an Internet service. Therefore, requires connectivity to the Internet.
 *
 * @param string $country
 *   Country code (e.g. us, de, ...)
 * @param string $city
 *   City name (e.g. New York City, Nairobi, ...)
 * @param string $lat
 *   Latitude returned as result
 * @param string $long
 *   Longitude returned as result 
 * @return integer 
 *   Returns -1 if it could not resolve the query, 0 otherwise.
 *
 */
function labdoo_lookup_coordinates($country, $city, &$lat, &$lon) {

    # There are various online services to pull the GPS  
    # coordinates of a location. Use one of them.
    $query = str_replace(' ', '%', 'https://maps.googleapis.com/maps/api/geocode/json?address='.$city.'&sensor=false&region='.$country);
    $mapQuery = drupal_http_request($query);
    if(!property_exists($mapQuery, 'data')) {
      drupal_set_message('Could not resolve coordinates from the given city and country names.');
      return -1;
    }
    $mapQueryDecoded = drupal_json_decode($mapQuery->data);
    $coordinates = $mapQueryDecoded['results'][0]['geometry']['location'];
    $lat = $coordinates['lat'];
    $lon = $coordinates['lng']; 
    return 0;
}


/**
 * Renders a map geolocating the node where this function is invoked from
 *
 */
function labdoo_render_map_geolocate_node() {

  // Make sure this is called from a valid node
  if ((arg(0) != 'node') || !is_numeric(arg(1))) 
    return;

  $node = node_load(arg(1));

  // Accept only certain types of content types
  $types = array('laptop' => 1,'dootrip' => 1,'hub' => 1, 'edoovillage' => 1) ;
  if(!isset($types[$node->type]))
    return;

  $div_id = 'map-geolocate-node'; 
  $map_style = 'height:200px;'; 
  $map_options = '{"mapTypeId":"roadmap", "zoom":10}';
  $marker_color = NULL; 
  $visitor_marker = FALSE;
  $center_option = 1;
  $center_latlng = array(0, 0);

  if($node->type != 'dootrip') {
    $locations = array();
    $locations[0] = new stdClass();

    $locations[0]->latitude = $node->locations[0]['latitude'];
    $locations[0]->longitude = $node->locations[0]['longitude']; 
    if($node->type == 'laptop') {
      $locations[0]->balloon_text = "Dooject ID: $node->title";
    }
    if($node->type == 'edoovillage') {
      $nodeCity = $node->locations[0]['city'];
      $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
      $locations[0]->balloon_text = "Edoovillage: $nodeCity, $nodeCountry";
    }
    if($node->type == 'hub') {
      $nodeCity = $node->locations[0]['city'];
      $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
      $locations[0]->balloon_text = "Hub: $nodeCity, $nodeCountry";
    }
  }
  else { // It's a dootrip
    $srcCity = $node->field_origin_of_the_trip['und'][0]['city'];
    $srcCity = preg_replace('/\s+/', '%20', $srcCity);
    $srcCountry = $node->field_origin_of_the_trip['und'][0]['country'];
    $srcCountryLong = labdoo_country_code2name($srcCountry);
    $dstCity = $node->field_destination_of_the_trip['und'][0]['city'];
    $dstCity = preg_replace('/\s+/', '%20', $dstCity);
    $dstCountry = $node->field_destination_of_the_trip['und'][0]['country'];
    $dstCountryLong = labdoo_country_code2name($dstCountry);

    if(labdoo_lookup_coordinates($srcCountry, $srcCity, $locations[0]->latitude, $locations[0]->longitude) < 0) 
      return;
    $locations[0]->balloon_text = "Dootrip origin: " . str_replace('%20', ' ', $srcCity) . ", $srcCountryLong";
    if(labdoo_lookup_coordinates($dstCountry, $dstCity, $locations[1]->latitude, $locations[1]->longitude) < 0) 
      return;
    $locations[1]->balloon_text = "Dootrip destination: " . str_replace('%20', ' ', $dstCity) . ", $dstCountryLong";

    $map_style = 'height:400px;'; 
    $map_options = '{"mapTypeId":"roadmap", "zoom":2}';
  }

  return ip_geoloc_output_map_multi_location($locations, $div_id, $map_options, $map_style, 
                                            $marker_color, $visitor_marker, 
                                            $center_option, $center_latlng, FALSE);
}


/**
 * Renders a dooject's header
 *
 * @param nodeId The ID of the dooject 
 *
 */
function labdoo_render_dooject_header() {
  $htmlCode = "";

  if ((arg(0) != 'node') || !is_numeric(arg(1))) 
    return;

  $nodeObj = node_load(arg(1));
  $nodeId = $nodeObj->nid;

  // Accept only certain types of content types
  $types = array('laptop' => 1) ;
  if(!isset($types[$nodeObj->type]))
    return;

  $laptopId = $nodeObj->title;

  $query = "SELECT field_edoovillage_destination_target_id 
            FROM field_data_field_edoovillage_destination WHERE entity_id=$nodeId";
  $edoovillageId = db_query($query)->fetchField();

  $numDoojects = lbd_get_total_num_objects("laptop");

  if(intval($laptopId) == $numDoojects) {
    $nextUri = "<a href=\"" . request_uri() . "/../.." . "/laptop/000000001\">";
  }
  else {
    $nextIdFull = sprintf("%09d", intval(intval($laptopId)+1));
    $nextUri = "<a href=\"" . request_uri() . "/../.." . "/laptop/" . $nextIdFull . "\">";
  }
  if(intval($laptopId) == 1) {
    $prevIdFull = sprintf("%09d", intval(intval($numDoojects)));
    $prevUri = "<a href=\"" . request_uri() . "/../.." . "/laptop/" . $prevIdFull . "\">";
  }
  else {
    $prevIdFull = sprintf("%09d", intval(intval($laptopId)-1));
    $prevUri = "<a href=\"" . request_uri() . "/../.." . "/laptop/" . $prevIdFull . "\">";
  }

  $tagsUri = "/content/tag-one-laptop?id=" . $laptopId;

  // Table header
  $htmlCode = $htmlCode . '<table border="0" cellpadding="1" cellspacing="1" style="width: 850px;"><tbody><tr><td>';

  // Left arrow
  $htmlCode = $htmlCode . '<p class="small rteleft" style="font-family: monospace;">' . $prevUri .
                          '<img alt="" src="/profiles/labdoo/files/pictures/arrow_left.png" style="width: 40px; height: 49px; "/> 
                           &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</a>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>'; 

  // Tagging howto (lightbox)
  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " 
                           align="middle"><a href="/profiles/labdoo/files/pictures/tagging-flow.png" 
                           rel="lightbox" style="line-height: 10px; color: rgb(17, 85, 119);"><img alt="image labdoo" rel="lightbox" 
                           src="/profiles/labdoo/files/pictures/tagging-flow.png" style="border-style: solid; color: rgb(51, 51, 51); 
                           width: 151px; height: 100px;" /></a></p>'; 
  
  // Button for tagging 
  $htmlCode = $htmlCode . '<p><input type="button" value="Print tags for this dooject"onclick="window.open(\''.$tagsUri.'\', 
                           \'windowpopup\', \'resizable=yes,menubar=1,status=no,width=700,height=700\');"/>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Photo album icon and button
  if($edoovillageId) {
    $albumUri = request_uri() . "/../../node/" . $edoovillageId;
    $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
                             <img alt="" src="/profiles/labdoo/files/pictures/photo-album-icon.jpg" style="width: 122px; height: 100px; "/></a>';
    $htmlCode = $htmlCode . '<p><input type="button" value="Go to photo album"onclick="window.open(\''.$albumUri.'\', \'target=_self\');"/>';
  }

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Follow dooject button
  if (user_is_logged_in()) {
    global $user;
    $userId = $user->uid; 
    $userObj = user_load($userId);
    if(labdoo_is_dooject_followed($nodeObj, $userObj)) { 
      $followDoojectUrl = request_uri() . "/../../content/follow-dooject?d=$nodeId&u=$userId&f=0";
      $followMsg = "Unfollow this dooject";
    }
    else {
      $followDoojectUrl = request_uri() . "/../../content/follow-dooject?d=$nodeId&u=$userId&f=1";
      $followMsg = "Follow this dooject";
    }
  }
  else {
    $followDoojectUrl = request_uri() . "/../../content/follow-dooject?d=$nodeId&f=1";
    $followMsg = "Follow this dooject";
  }
  
  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
           <img alt="" src="/profiles/labdoo/files/pictures/laptop.png" style="width: 102px; height: 100px; "/>&nbsp;&nbsp; </a>'; 
  $htmlCode = $htmlCode . '<p><input type="button" value="' . $followMsg . '" onclick="window.open(\''.$followDoojectUrl.'\', 
           \'windowpopup\', \'resizable=yes,menubar=1,status=no,width=700,height=700\');setTimeout(\'history.go(0);\',2000);"/>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Print right arrow
  $htmlCode = $htmlCode . '<p class="small rteright" style="font-family: monospace;">'.$nextUri.'&nbsp; &nbsp; &nbsp; 
                           &nbsp;&nbsp; &nbsp; &nbsp; &nbsp;<img alt="" src="/profiles/labdoo/files/pictures/arrow_right.png" 
                           style="width: 40px; height: 49px; "/> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</a>';

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Renders an edoovillage header
 *
 */
function labdoo_render_edoovillage_header() {

  $htmlCode = "";

  if ((arg(0) != 'node') || !is_numeric(arg(1))) 
    return;

  $nodeObj = node_load(arg(1));
  $nodeId = $nodeObj->nid;

  // Accept only edoovillages 
  $types = array('edoovillage' => 1) ;
  if(!isset($types[$nodeObj->type]))
    return;

  // Table header
  $htmlCode = $htmlCode . '<table border="0" cellpadding="1" cellspacing="1" style="width: 850px;"><tbody><tr><td>';

  // Photo album icon and button
  $albumUri = request_uri() . "/../../node/" . $nodeId;
  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
                           <img alt="" src="/profiles/labdoo/files/pictures/photo-album-icon.jpg" style="width: 122px; height: 100px; "/></a>';
  $htmlCode = $htmlCode . '<p align="middle"><input type="button" value="Go to photo album"onclick="window.open(\''.$albumUri.'\', \'target=_self\');"/>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Semaphore
  $semaphorePic = 'semaphore-red.png';
  $semaphoreState = labdoo_lib_get_field($nodeObj, 'field_semaphore', 'node', 'value'); 
  if($semaphoreState == 'yellow')
    $semaphorePic = 'semaphore-yellow.png';
  else if($semaphoreState == 'green')
    $semaphorePic = 'semaphore-green.png';
  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
                           <img alt="" src="/profiles/labdoo/files/pictures/' . $semaphorePic . '" style="width: 400px; height: 120px; "/></a>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Generates a comma-separated list of emails that need
 * to be notified upon a change of status of a dooject
 *
 * @param node The dooject's node
 *
 */
function labdoo_dooject_extract_emails($node) {
    $emailsList = "";

    foreach($node->field_tagger['und'] as $element) {
      $userObj = user_load($element['target_id']);
      $emailsList = $emailsList . ", " . $userObj->mail;
    }

    foreach($node->field_manager['und'] as $element) {
      $userObj = user_load($element['target_id']);
      $emailsList = $emailsList . ", " . $userObj->mail;
    }
 
    if($node->field_additional_followers) {
      if(array_key_exists('und', $node->field_additional_followers)) {
        foreach($node->field_additional_followers['und'] as $element) {
          $userObj = user_load($element['target_id']);
          $emailsList = $emailsList . ", " . $userObj->mail;
        }
      }
    }

    if($node->field_additional_notification_em) {
      if(array_key_exists('und', $node->field_additional_notification_em)) {
        foreach($node->field_additional_notification_em['und'] as $element) {
          $emailsList = $emailsList . ", " . $element["email"];
        }
      }
    }

    $emailsList = $emailsList . ", " . variable_get('site_mail', '');

    if($emailsList[0] == ",")
      $emailsList = substr($emailsList, 2);
 
    return $emailsList; 
}


/**
 * Generates a comma-separated list of emails that need
 * to be notified upon a change of status of a dootrip
 *
 * @param node $node
 *   The dooject's node
 *
 */
function labdoo_dootrip_extract_emails($node) {
    $emailsList = "";

    foreach($node->field_dootripper_s_['und'] as $element) {
      $userObj = user_load($element['target_id']);
      $emailsList = $emailsList . ", " . $userObj->mail;
    }

    $emailsList = $emailsList . ", " . variable_get('site_mail', '');

    if($emailsList[0] == ",")
      $emailsList = substr($emailsList, 2);

    return $emailsList; 
}


/**
 * Implementation of hook_node_update
 *
 */
function labdoo_lib_node_update($node) {

  if($node->type == 'laptop') {

    /*
     * Automatically update the location of a dooject
     * to match that of its assigned edoovillage for states
     * T1 or S4.
     */
    $doojectStatus = $node->field_status['und'][0]['value'];
    $oldNode = node_load($node->nid);
    if($oldNode)
      $oldDoojectStatus = $oldNode->field_status['und'][0]['value'];
    else // This is a newly inserted node
      $oldDoojectStatus = "-1";  // Any non-status string will do it
    if($doojectStatus != $oldDoojectStatus && ($doojectStatus == "T1" || $doojectStatus == "S4")) {
      // Use a PHP shutdown callback (invoked upon exiting the PHP thread)
      // to ensure the node has been stored in the database prior to updating the location.
      // FIX: this can also be probably done using hook_node_presave
      //      just like we are doing with other fields.
      //      For now we leave it here as an example of an alternative technique.
      register_shutdown_function('_update_dooject_location_from_edoovillage', $node);
      drupal_set_message(t('The location of this dooject has been automatically assigned to the location of its edoovillage.'));
    }

  }

  return;
}


/**
 * Implementation of hook_node_presave
 *
 */
function labdoo_lib_node_presave($node) {

  if(!property_exists($node, 'original') && $node->type == 'laptop') {
    /*
     * Update the title and path alias
     */
    // The ID of this new dooject is equal to the 
    // current number of laptops in the database
    // TODO: global lock for the counter
    $numLaptops = lbd_get_total_num_objects("laptop") + 1; 
    // The Labdoo identifier of each
    // laptop is stored as the node's title
    $node->title = sprintf("%09d", intval($numLaptops));

    // Add laptop path alias for 1.0 compatibility.
    // There are basically two ways to access a laptop:
    // via laptop/$ID or content/$ID
    $path = 'laptop/' . $node->title;
    $node->path = array('alias' => $path);
  }

  if($node->type == 'laptop') {
    // If not set, make a best estimate of its GPS coordinates
    $location = $node->locations[0]; 
    if(!array_key_exists('latitude', $location) || !array_key_exists('longitude', $location)) {
      // Attempt to find out the coordinates.
      // Latitude and longitude are passed as reference.
      $ret = labdoo_lookup_coordinates($location['country'], $location['city'], $node->locations[0]['latitude'], $node->locations[0]['longitude']);
      if($ret == 0) // If successful, do not let the system attempt to geolocate it anymore
        $node->locations[0]['inhibit_geocode'] = TRUE;
    }
  }

  if($node->type == 'edoovillage') {
    /*
     * Update title in case any of its parts was modified
     */
    $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
    $nodeCity = $node->locations[0]['city'];
    $node->title = $nodeCountry . ", " . $nodeCity . ": " . $node->field_project_summary['und'][0]['value'];
  }

  if($node->type == 'dootrip') {
    /*
     * Update the title
     */
    if(!property_exists($node, 'original'))
      $dootripId = lbd_get_total_num_objects("dootrip") + 1; 
    else {
      $dootripIdExp = explode(' ', trim($node->title));
      $dootripId = $dootripIdExp[0];
    }
    $dootripTitle = _generate_dootrip_title($node, $dootripId);
    $node->title = $dootripTitle;
    /*
     * Update GPS coordinates
     */
    $location = $node->field_origin_of_the_trip['und'][0]; 
    $ret = labdoo_lookup_coordinates($location['country'], 
                                     $location['city'], 
                                     $node->field_origin_of_the_trip['und'][0]['latitude'], 
                                     $node->field_origin_of_the_trip['und'][0]['longitude']);
    if($ret == 0) // If successful, do not let the system attempt to geolocate it anymore
      $node->field_origin_of_the_trip['und'][0]['inhibit_geocode'] = TRUE;

    $location = $node->field_destination_of_the_trip['und'][0]; 
    $ret = labdoo_lookup_coordinates($location['country'], 
                                     $location['city'], 
                                     $node->field_destination_of_the_trip['und'][0]['latitude'], 
                                     $node->field_destination_of_the_trip['und'][0]['longitude']);
    if($ret == 0) 
      $node->field_destination_of_the_trip['und'][0]['inhibit_geocode'] = TRUE;
  }

  return;
}


/**
 * Implementation of hook_form_node_form_alter
 *
 */
function labdoo_lib_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  /*
   * Node is a laptop
   */
  if($form_id == 'laptop_node_form') {

    /*
     * Hide the title from the form
     * so that users can't write to it.
     * That's done because the title is
     * programmatically given the value of
     * the laptop's Labdoo ID
     */
    unset($form['title']);

    /*
     * Defaults for node creation
     */
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      if(empty($form['field_tagger']['und'][0]['target_id']['#default_value'])) {    
        $form['field_tagger']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
        $form['field_manager']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
      }
    }
  }

  /*
   * Node is a dootrip
   */
  if($form_id == 'dootrip_node_form') {

    // Hide title
    unset($form['title']);

    /*
     * Defaults for node creation
     */
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      if(empty($form['field_dootripper_s_']['und'][0]['target_id']['#default_value'])) {    
        $form['field_dootripper_s_']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
      }
    }

  }

  /*
   * Node is an edoovillage
   */
  if($form_id == 'edoovillage_node_form') {
    // Hide title
    unset($form['title']);
  }

}


/** 
 * Calculates the total number of doojects 
 * 
 * @return The total number of doojects in the Labdoo inventory 
 *  
 */
function lbd_get_total_num_objects($objectType) {

  $query = "SELECT COUNT(*) FROM node WHERE type='$objectType'";
  $numDoojects = db_query($query)->fetchField();

  return($numDoojects);
}


/*
 * update_city
 *
 */
function update_city($lid, &$objectsCount) {  

  $country_names = location_get_iso3166_list();

  $query = "SELECT city, country FROM location WHERE lid=$lid";
  $city = db_query($query)->fetchObject()->city;
  $country = db_query($query)->fetchObject()->country;
  $query = "SELECT latitude, longitude FROM location WHERE lid=$lid";
  $lat = db_query($query)->fetchObject()->latitude;
  $lon = db_query($query)->fetchObject()->longitude;
  if($lat == 0 and $lon == 0)
    labdoo_lookup_coordinates($country, $city, $lat, $lon);

  if(array_key_exists($country, $country_names))
    $countryExt = $country_names[$country];
  else 
    $countryExt = $country;

  if(!isset($objectsCount[strtoupper($city)]))
  {
    $objectsCount[strtoupper($city)]['count'] = 0;
    $objectsCount[strtoupper($city)]['lat'] = $lat;
    $objectsCount[strtoupper($city)]['lon'] = $lon;
    $objectsCount[strtoupper($city)]['country'] = $countryExt;
  }

  $objectsCount[strtoupper($city)]['count']++;
  $objectsCount[strtoupper($city)]['city'] = $city;
  return;
}


/** 
 * Calculates the number of objects for each city
 * 
 * @param type The type of objects 
 * @param selectedNids If not NULL, an array of node IDs that are to be used 
 * @return An array indexed by the name of the city in capital letters
 * and with various fields: 
 *
 *   'count': The number of doojects in the city
 *     'lat': The latitude of the city
 *     'lon': The longitude of the city
 * 'country': The country of the city 
 *  
 */ 
function labdoo_getnum_objects_by_city($type, $selectedNids = NULL) {

  $objectsCount = array();
  $query = "SELECT nid, vid FROM node WHERE type='$type'";
  $objects = db_query($query);

  foreach($objects as $object) {
    if(is_array($selectedNids) and !in_array($object->nid, $selectedNids))
      continue; 
    if($type == "dootrip") {
      $query = "SELECT field_origin_of_the_trip_lid AS lid FROM field_data_field_origin_of_the_trip 
                WHERE entity_id=$object->nid";
      $lid = db_query($query)->fetchField();
      update_city($lid, $objectsCount);
      $query = "SELECT field_destination_of_the_trip_lid AS lid FROM field_data_field_destination_of_the_trip 
                WHERE entity_id=$object->nid";
      $lid = db_query($query)->fetchField();
      update_city($lid, $objectsCount);
    }
    else {
      $query = "SELECT lid FROM location_instance WHERE nid=$object->nid AND vid=$object->vid";
      $lid = db_query($query)->fetchField();
      update_city($lid, $objectsCount);
    }
  } 

  return $objectsCount;
}

/**
 * Calculates the total number of doojects
 * in demand from the list of edoovillages
 *
 * @param edoovillageId node ID of the edoovillage we want to find the demand for 
 * @param hubId node ID of the hub we want to find the demand for 
 * @param $doAverage calculate the fair share of demand that a hub should take
 * for each edoovillage, understood as demand divided by the number of hubs
 * taking care of that edoovillage
 *
 */
function labdoo_get_demand($edoovillageId, $hubId, $doAverage) {

  if($doAverage) {

    if($hubId) {

      $query = "SELECT SUM(b.field_number_of_laptops_needed_value / a.numberHubs) 
                FROM 
                  (SELECT COUNT(*) numberHubs, entity_id 
                    FROM field_data_field_hub WHERE entity_id IN (SELECT entity_id 
                      FROM field_data_field_hub WHERE field_hub_target_id=$hubId) GROUP BY entity_id) a 
                INNER JOIN 
                  (SELECT entity_id, field_number_of_laptops_needed_value 
                    FROM field_data_field_number_of_laptops_needed  WHERE entity_id IN (SELECT entity_id 
                      FROM field_data_field_hub WHERE field_hub_target_id=$hubId)) b ON a.entity_id = b.entity_id";

    }
    else {

      // TODO: not implemented yet
      return -1;

    }

  }

  else {

    if($hubId) {
 
      $query = "SELECT SUM(field_number_of_laptops_needed_value) 
                FROM field_data_field_number_of_laptops_needed 
                WHERE entity_id IN (SELECT entity_id 
                FROM field_data_field_hub WHERE field_hub_target_id=$hubId)"; 

    }

    else if($edoovillageId) {

      $query = "SELECT SUM(field_number_of_laptops_needed_value) 
                FROM field_data_field_number_of_laptops_needed WHERE entity_id=$edoovillageId"; 

    }

    else {

      $query = "SELECT SUM(field_number_of_laptops_needed_value) FROM field_data_field_number_of_laptops_needed"; 

    }

  }

  $numLaptops = db_query($query)->fetchField();

  return $numLaptops;
}


/** 
 *
 * Calculates the number of doojects assigned 
 * to a hub in a give state
 * 
 */ 
function labdoo_getnum_doojects($edoovillageId, $hubId, $status) {

  $country_names = location_get_iso3166_list();

  if($hubId) 
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
              AND entity_id IN (SELECT entity_id FROM field_data_field_hub_laptop WHERE field_hub_laptop_target_id=$hubId)"; 
  else if($edoovillageId)
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
              AND entity_id IN (SELECT entity_id FROM field_data_field_edoovillage_destination 
              WHERE field_edoovillage_destination_target_id=$edoovillageId)"; 
  else
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status'"; 

  $numLaptops = db_query($query)->fetchField();

  return $numLaptops;
}


/**
 * Returns the title of a node
 *
 * @param nodeId The ID of a node
 *
 * @return The title of the node 
 * 
 */
function lbd_nodeid2title($nodeId)
{
    $title = db_query("SELECT title FROM node WHERE nid = :nid ", array(':nid' => $nodeId))->fetchField();
    return $title; 
}


/*
 * lbd_generate_qrcode
 *
 * @param tag dooject identifier
 * @param widthHeight height of the QR code
 * @param EC_level error correction level
 * @param margin margin 
 *
 */
function lbd_generate_qrcode($tag, $widthHeight ='60', $EC_level='L', $margin='0') {
  $thisTag = urlencode("http://www.labdoo.org/laptop/".$tag);
  echo '<img src="http://chart.apis.google.com/chart?chs='.$widthHeight.
       'x'.$widthHeight.'&cht=qr&chld='.$EC_level.'|'.$margin.
       '&chl='.$thisTag.'" alt="QR code" widthHeight="'.$widthHeight.
       '" widthHeight="'.$widthHeight.'"/>';
  return;
}


/**
 * Prints the labels of a dooject
 *
 * @param laptopid The ID of the dooject 
 *
 */
function lbd_print_dooject_labels($laptopid = NULL) {

  if(($laptopid == NULL) || 
     (!is_numeric($laptopid)) || 
     (intval($laptopid) < 1) || 
     (intval($laptopid) > lbd_get_total_num_objects("laptop")) || 
     (strlen($laptopid) != 9))
  {
    print(t('<p><strong>Wrong Identifier. &nbsp;
            Please use a <span style="color:#ff0000;">9 digit</span> number to correctly display the tags.</strong></p> 
            <p><a href="http://www.labdoo.org">Back to Labdoo.org</a></p>'));
    return;
  }

  print('

Print and attach these three labels to: (1) the device, (2) the power adaptor and <br>(3)
inside the battery compartment of the device. You can omit the third tag if the<br> device has no battery
compartment.
Check this <a href="http://www.labdoo.org/sites/default/files/tagging-flow.png" target="_blank">drawing</a> if in doubt.
<br>
<br>

<table border="0" cellpadding="1" cellspacing="1" style="width: 580px;">
        <tbody>
                <tr>
                        <td style="width: 120px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Device tag<br>www.<span style="color: rgb(255, 0, 0);">lab</span><span style="color: rgb(0, 102, 255);">d</span><span style="color: rgb(102, 204, 51);">oo</span>.org<br>
ID: '.$laptopid.'
</strong></p>
                        </td>
                        <td style="width: 120px;">
  ');
  lbd_generate_qrcode($laptopid);
  print('
                        </td>
                        <td style="width: 120px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Power adap. tag<br>www.<span style="color: rgb(255, 0, 0);">lab</span><span style="color: rgb(0, 102, 255);">d</span><span style="color: rgb(102, 204, 51);">oo</span>.org<br>
ID: '.$laptopid.'
</strong></p>
                        </td>
                        <td style="width: 120px;">
  ');
  lbd_generate_qrcode($laptopid);
  print('
                        </td>
                        <td style="width: 120px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Batt. comp. tag<br>www.<span style="color: rgb(255, 0, 0);">lab</span><span style="color: rgb(0, 102, 255);">d</span><span style="color: rgb(102, 204, 51);">oo</span>.org<br>
ID: '.$laptopid.'
</strong></p>
                        </td>
                        <td style="width: 120px;">
  ');
  lbd_generate_qrcode($laptopid);
  print('
                        </td>

                </tr>
        </tbody>
</table>

  ');

  return;
}


/**
 * Checks if a dooject is being followed by a user
 *
 * @param doojectObject The dooject object 
 * @param userObject The user object 
 */
function labdoo_is_dooject_followed($doojectObject, $userObject) {

  $wDoojectNode = entity_metadata_wrapper('node', $doojectObject);
  $currList = $wDoojectNode->field_additional_followers->value();

  if(in_array($userObject, $currList))
    return True;
  else
    return False;
}
 

/**
 * Allows a user to follow a dooject
 *
 * @param laptopid The ID of the dooject 
 * @param userid The ID of the user 
 * @param follow If '1', follow the dooject; if '0', stop following the dooject 
 *
 */
function labdoo_follow_dooject($doojectId = NULL, $userId = NULL, $follow = NULL) {

  print('<img alt="" src="/profiles/labdoo/files/pictures/laptop_follow.png" style="width: 117px; height: 108px; "/> ');

  if(($doojectId == NULL) || 
     (!is_numeric($doojectId)) || 
     (intval($doojectId) < 0))
  {
    print(t("Not a valid dooject."));
    return;
  }

  if(($userId == NULL) || 
     (!is_numeric($userId)) || 
     (intval($userId) < 0))
  {
    print(t("Not a valid user."));
    return;
  }
 
  if($follow != 0 && $follow != 1)
  {
    print(t("Wrong parameter"));
    return;
  }

  $doojectNode = node_load($doojectId);
  if($doojectNode == FALSE || $doojectNode->type != 'laptop')
  {
    print(t("Dooject not found"));
    return;
  }

  $newRef = user_load($userId);
  if($newRef == FALSE)
  {
    print(t("User not found"));
    return;
  }

  $wDoojectNode = entity_metadata_wrapper('node', $doojectNode);
  $currList = $wDoojectNode->field_additional_followers->value();
  if(!$currList)
    $currList = array();

  if(in_array($newRef, $currList))
  {
    if($follow == '1') 
    {
      drupal_set_message(t('You are already tracking Dooject ' . $doojectNode->title));
      return; // User is already following this dooject, just return
    }
  }
  else if($follow == '0')
  {
    drupal_set_message(t('You are not tracking Dooject ' . $doojectNode->title));
    return; // User is already following this dooject, just return
  }

  if($follow == '1')
  {
    $currList[] = $newRef;
    drupal_set_message(t('You are now tracking Dooject ' . $doojectNode->title));
  }
  else
  {
    $key = array_search($newRef, $currList);
    unset($currList[$key]);
    drupal_set_message(t('You are no longer tracking Dooject ' . $doojectNode->title));
  }

  $wDoojectNode->field_additional_followers->set($currList);
  $wDoojectNode->save();

  return;
}


/**
 * Get the value of a node field.
 * If there are multiple values, get just the first one. 
 * Field must have the key $key.
 *
 * @param node $node
 *   The node where the entity field is contained
 * @param string $field 
 *   The entity field name 
 * @param string $type
 *   The type of node, it must be one of {'user', 'node'}
 * @param string $key
 *   The key to retrieve
 *
 */
function labdoo_lib_get_field($node, $field, $type, $key) {
  $field_items = field_get_items($type, $node, $field);
  if(!$field_items)
    return;
  if(!array_key_exists(0, $field_items))
    return NULL;
  return($field_items[0][$key]);
}


/*
 * Prints an array in a user friendly way
 * using drupal_set_message
 *
 * @param array $array An input array
 *
 */
function labdoo_lib_print_array($array, $prefix = "") {
  foreach($array as $key => $value) {
    drupal_set_message($prefix . " key: " . $key);
    if(is_string($value))
      drupal_set_message($prefix . " value: " . $value);
    else
      drupal_set_message($prefix . " value: is not a string");
    if(is_array($value))
      labdoo_lib_print_array($value, $prefix . "---|");
  }
}

