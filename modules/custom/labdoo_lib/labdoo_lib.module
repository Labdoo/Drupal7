<?php

/**
 * @defgroup labdoolib LabdooLib: Set of core APIs and library functions exposed by Labdoo
 *
 * This module is Labdoo's "Swiss Army Knife" providing the general core functionality
 * and exposing general Labdoo APIs that are not specific to any other more specialized module
 *
 */


/**
 * @file
 * Main file for the Labdoo Library module
 *
 * @ingroup labdoolib 
 */

/**
 *
 * Given a country code, it returns the name of the country
 *
 * @param string $countryCode
 *   Country code
 * @return string
 *   Country name
 *
 */
function labdoo_country_code2name($countryCode) {
  $countryNames = location_get_iso3166_list();
  if(array_key_exists($countryCode, $countryNames))
    return $countryNames[$countryCode];
  else
    return "[country not defined]";
}


/**
 * Prints all the countries and cities within Labdoo.org
 *
 * This function can be used to generate cloudtags with http://worditout.com/word-cloud/make-a-new-one
 *
 */
function labdoo_list_all_countries() {
  $query = "SELECT country FROM location";
  $countries = db_query($query);
  foreach($countries as $country) {
    # Substitute blank spaces with sign "~" so that countries with multiple words can be processed together
    $countrySet = $countrySet . ", " . str_replace(" ", "~", labdoo_country_code2name($country->country));
  }
  drupal_set_message($countrySet);
  $query = "SELECT DISTINCT city FROM location";
  $cities = db_query($query);
  foreach($cities as $city) {
    $citySet = $citySet . ", " . str_replace(" ", "~", $city->city);
  }
  drupal_set_message($citySet);
}


/**
 * Generates the title of a dootrip 
 *
 * @param node The node of the dootrip 
 * @param dootripId The numeric identifier of the dootrip 
 *
 * @return a string containing the new title
 *
 */
function _generate_dootrip_title($node, $dootripId) {

  $srcCity = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'city'); 
  $srcCountry = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'country'); 
  $srcCountry = labdoo_country_code2name($srcCountry);

  $dstCity = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'city'); 
  $dstCountry = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country'); 
  $dstCountry = labdoo_country_code2name($dstCountry);

  if($srcCity) 
    $srcLocation = $srcCity . " (" . $srcCountry . ")";
  else
    $srcLocation = $srcCountry;
  if($dstCity)
    $dstLocation = $dstCity . " (" . $dstCountry . ")";
  else
    $dstLocation = $dstCountry;
  $dootripIdStr = sprintf("%09d", $dootripId);
  $newTitle = "Dootrip #" . $dootripIdStr . " - from " . $srcLocation . " to " . $dstLocation;

  return $newTitle;
}


/**
 * Updates the location of a dootronic to match that of its 
 * assigned edoovillage
 *
 * @param node Node id of the dootronic
 *
 */
function _update_dooject_location_from_edoovillage($node) {

  // Get destination project
  $query = "SELECT field_edoovillage_destination_target_id 
            FROM field_data_field_edoovillage_destination WHERE entity_id=$node->nid";
  $edoovillageId = db_query($query)->fetchField();
  if(!$edoovillageId)
    return;

  // Get the location id of the destination project
  $query = "SELECT lid FROM location_instance project 
            WHERE vid=(SELECT MAX(vid) FROM location_instance WHERE nid=project.nid) AND (nid=$edoovillageId)";
  $edoovillageLid = db_query($query)->fetchField();
  if(!$edoovillageLid)
    return;

  // Update the location of the laptop to be that of the destination project
  $query = "SELECT vid FROM location_instance project 
            WHERE vid=(SELECT MAX(vid) FROM location_instance WHERE nid=project.nid) AND (nid=$node->nid)";
  $laptopVid = db_query($query)->fetchField();
  $query ="UPDATE location_instance SET lid=$edoovillageLid WHERE vid=$laptopVid AND nid=$node->nid";
  $result = db_query($query);

  return;
}


/**
 * Updates the original book reference in a book node, it should
 * only be invoked if field_is_first_page is set to TRUE
 *
 * @param node Node id of the book
 *
 */
function _update_book_reference($node) {
  $nodeLoaded = node_load($node->nid);
  $nodeLoaded->field_reference_book[$nodeLoaded->language][0]['target_id'] = $node->nid;
  node_save($nodeLoaded);
  return;
}


/**
 * Updates a hub. This function is useful for instance when
 * there is a need to updated computed fields (like the 'hub branches').
 *
 * @param node Node id of the dooject
 *
 */
function _update_hub($node) {
  field_attach_update('node', $node);
  return;
}


/**
 * Attempts to estimate latitude and longitude from the names of the city and country
 * by querying an Internet service. Therefore, requires connectivity to the Internet.
 * To avoid all same [country, city] queries be mapped onto the same point, a small 
 * random value is added to both latitude and longitude.
 *
 * @param string $country
 *   Country code (e.g. us, de, ...)
 * @param string $city
 *   City name (e.g. New York City, Nairobi, ...)
 * @param string $lat
 *   Latitude returned as result
 * @param string $long
 *   Longitude returned as result 
 * @param boolean $silent
 *   If true, do not display warning messages
 * @param street $street
 *   Street name
 * @param string $state
 *   State or province
 * @param string $zip
 *   Zip code
 * @param integer $accuracy
 *   Factor to help control the accuracy via the random number added to lat and lon 
 * @return integer 
 *   Returns -1 if it could not resolve the query, 0 otherwise.
 *
 */
function labdoo_lookup_coordinates($country, $city, &$lat, &$lon, $silent=True, $street="", $state="", $zip="", $accuracy=100) {
    # There are various online services to pull the GPS  
    # coordinates of a location. Use one of them.
    $locationString = $street . "+" . $city . "+" . $zip . "+" . $country;
    $query = str_replace(' ', '+', 'https://maps.googleapis.com/maps/api/geocode/json?address='.$locationString);
    $mapQuery = drupal_http_request($query);
    if(!property_exists($mapQuery, 'data')) {
      if($silent == False)
        drupal_set_message(t('Could not resolve coordinates from the given city and country names.'), 'warning', FALSE);
      return -1;
    }
    $mapQueryDecoded = drupal_json_decode($mapQuery->data);
    if(!isset($mapQueryDecoded['results'][0])) {
      if($silent == False)
        drupal_set_message(t('Could not resolve coordinates from the given city and country names.'), 'warning', FALSE);
      return -1;
    }
    $coordinates = $mapQueryDecoded['results'][0]['geometry']['location'];
    $lat = strval(floatval($coordinates['lat'])+rand(-1 * $accuracy, 1 * $accuracy)/100000);
    $lon = strval(floatval($coordinates['lng'])+rand(-1 * $accuracy, 1 * $accuracy)/100000); 
    return 0;
}


/**
 * Renders a map geolocating the node where this function is invoked from
 *
 * @param int $nodeId The identifier of a node
 * @param boolean $displayDoojects If true, display doojects associated with node
 * @param string $divId The identifier of the div tag
 *
 * @return map Returns a map that can be rendered 
 *
 */
function labdoo_render_map_geolocate_node($nodeId = NULL, $displayDoojects = False, $divId = "map-geolocate-node") {
  global $language;

  if($nodeId == NULL) {
    // Make sure this is called from a valid node
    if ((arg(0) != 'node') || !is_numeric(arg(1))) 
      return;
    $nodeId = arg(1);
  }

  $node = node_load($nodeId);
  if($node == FALSE)
    return;

  // Accept only certain types of content types
  $types = array('laptop' => 1,'dootrip' => 1,'hub' => 1, 'edoovillage' => 1) ;
  if(!isset($types[$node->type]))
    return;

  $map_style = 'height:200px; width:1170px'; 
  // TODO: the following switch should be made based on whether
  // the client is using a mobile browser or not, instead of content type.
  // Consider installing a module like context_mobile_detect and using
  // user-agent information to do this switch.
  if($node->type == 'hub')
    $map_style = 'height:300px; width:920px'; 
     
  $map_options = '{"mapTypeId":"roadmap", "zoom":10}';
  $marker_color = NULL; 
  $visitor_marker = FALSE;
  $center_option = 1;
  $center_latlng = array(0, 0);

  if($node->type != 'dootrip') {
    $locations = array();
    $locations[0] = new stdClass();
    $locations[0]->latitude = $node->locations[0]['latitude'];
    $locations[0]->longitude = $node->locations[0]['longitude']; 

    if($node->type == 'laptop') {
      $locations[0]->balloon_text = "Dootronic ID: $node->title";
    }
    if($node->type == 'edoovillage') {
      $nodeCity = $node->locations[0]['city'];
      $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
      $locations[0]->balloon_text = "Edoovillage: $nodeCity, $nodeCountry";
    }
    if($node->type == 'hub') {
      $nodeCity = $node->locations[0]['city'];
      $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
      $locations[0]->balloon_text = "Hub: $nodeCity, $nodeCountry";
      // Geolocate the branches too
      $hubBranches = labdoo_lib_hub_branches_list($node);
      $i = 0;
      foreach($hubBranches as $hubBranch) {
        $i++;
        $hubBranchLoaded = node_load($hubBranch);
        $nodeCity = $hubBranchLoaded->locations[0]['city'];
        $nodeCountry = labdoo_country_code2name($hubBranchLoaded->locations[0]['country']);
        $locations[$i] = new stdClass();
        $locations[$i]->latitude = $hubBranchLoaded->locations[0]['latitude'];
        $locations[$i]->longitude = $hubBranchLoaded->locations[0]['longitude'];
        $hubUri = drupal_get_path_alias("node/" .  $hubBranchLoaded->nid, $language->language);
        $locations[$i]->balloon_text = "<a href='$hubUri'>Hub branch: $nodeCity, $nodeCountry</a>";
        $locations[$i]->marker_color = "labdoo-marker-orange";
      }
      $map_options = '{"mapTypeId":"roadmap", "zoom":7}';
    }
    if($node->type == 'edoovillage' && $displayDoojects) {
      $query = "SELECT entity_id FROM field_data_field_edoovillage_destination WHERE (field_edoovillage_destination_target_id=:eid)";
      $placeHolders[':eid'] = $nodeId; 
      $result = db_query($query, $placeHolders);
      $i = 1;
      foreach($result as $item) {
        $nodeDooject = node_load($item->entity_id);
        $locations[$i] = new stdClass();
        $doojectLat = $nodeDooject->locations[0]['latitude'];
        $doojectLat = strval(floatval($doojectLat)+rand(-500,500)/10000000);
        $locations[$i]->latitude = $doojectLat;
        $doojectLon = $nodeDooject->locations[0]['longitude'];
        $doojectLon = strval(floatval($doojectLon)+rand(-500,500)/10000000);
        $locations[$i]->longitude = $doojectLon;
        $locations[$i]->balloon_text = "Dootronic ID: $nodeDooject->title";
        $i = $i + 1;
      }
    }
  }
  else { // It's a dootrip
    // Dootrips are special in that they are geolocated via the fields origin and destination of the trip,
    // rather than the standard location node fields.
    $srcCity = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'city'); 
    $srcCity = preg_replace('/\s+/', '%20', $srcCity);
    $srcCountry = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'country'); 
    $srcCountryLong = labdoo_country_code2name($srcCountry);

    $dstCity = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'city'); 
    $dstCity = preg_replace('/\s+/', '%20', $dstCity);
    $dstCountry = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country'); 
    $dstCountryLong = labdoo_country_code2name($dstCountry);

    // For dootrips, just make the resolution of the locations city wide (not street wide)
    if(labdoo_lookup_coordinates($srcCountry, $srcCity, $locations[0]->latitude, $locations[0]->longitude) < 0) 
      return;
    $locations[0]->balloon_text = "Dootrip origin: " . str_replace('%20', ' ', $srcCity) . ", $srcCountryLong";
    if(labdoo_lookup_coordinates($dstCountry, $dstCity, $locations[1]->latitude, $locations[1]->longitude) < 0) 
      return;
    $locations[1]->balloon_text = "Dootrip destination: " . str_replace('%20', ' ', $dstCity) . ", $dstCountryLong";

    $map_style = 'height:400px; width:1170px'; 
    $map_options = '{"mapTypeId":"roadmap", "zoom":2}';
  }

  return ip_geoloc_output_map_multi_location($locations, $divId, $map_options, $map_style, 
                                             $marker_color, $visitor_marker, 
                                             $center_option, $center_latlng, FALSE);
}


/**
 * Renders a dooject's header
 *
 * @return The code to render
 *
 */
function labdoo_render_dooject_header() {
  global $user;
  global $language;
  $defaultLanguage = language_default();
  $htmlCode = "";

  if ((arg(0) != 'node') || !is_numeric(arg(1)))
    return;

  $nodeObj = node_load(arg(1));
  $nodeId = $nodeObj->nid;

  // Accept only certain types of content types
  $types = array('laptop' => 1) ;
  if(!isset($types[$nodeObj->type]))
    return;

  if(drupal_get_path_alias(current_path()) == "node/" . $nodeId . "/edit")
    return;

  $laptopId = $nodeObj->title;

  $query = "SELECT field_edoovillage_destination_target_id 
            FROM field_data_field_edoovillage_destination WHERE entity_id=$nodeId";
  $edoovillageId = db_query($query)->fetchField();

  $numDoojects = lbd_get_total_num_objects("laptop");

  if(intval($laptopId) == $numDoojects)
    $nextIdFull = sprintf("%09d", 1);
  else
    $nextIdFull = sprintf("%09d", intval(intval($laptopId)+1));
  if(intval($laptopId) == 1)
    $prevIdFull = sprintf("%09d", intval(intval($numDoojects)));
  else
    $prevIdFull = sprintf("%09d", intval(intval($laptopId)-1));

  $tagsUri = "/content/tag-one-dooject?id=" . $laptopId;

  // Table header
  $htmlCode = $htmlCode . '<table align="center" width="1150px"><tr><td align="left">';

  // Hack: Add a tiny invisible image (of size zero in fact) to control the image that will show up 
  // when sharing the page with addtoany 
  $htmlCode = $htmlCode . '<img src="/profiles/labdoo/files/pictures/laptop.png" width="0" style="visibility:hidden"/>';

  // Left arrow
  $htmlCode = $htmlCode . "<a style='float: left;' href='../laptop/".$prevIdFull."'>
              <img src='/profiles/labdoo/files/pictures/arrow_left.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  $htmlCode = $htmlCode . '</td><td align="center">';

  $htmlCode = $htmlCode . "&nbsp&nbsp&nbsp";

  // Print tags
  $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/tag.png' style='width: 30px; height: 21px;'/>&nbsp;
              <a href='".$tagsUri."' target='_blank'>".t("Print tags")."</span></a>&nbsp&nbsp&nbsp";

  // Photo album icon and button
  if($edoovillageId) {
    $nodeEdoovillage = node_load($edoovillageId);
    if($nodeEdoovillage) {
      $wNode = entity_metadata_wrapper('node', $nodeEdoovillage);
      $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
      $albumUri = drupal_get_path_alias("node/" .  $nodeAlbum->nid, $language->language);
      if($language->language != $defaultLanguage->language)
        $albumUri = $language->language . "/" . $albumUri;
      $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/edoovillage.png' style='width: 35px; height: 30px;'/>&nbsp;
                  <a href='/".$albumUri."'>" . t("Photo album") . "</span></a>&nbsp&nbsp&nbsp";
    }
  }

  // Follow dooject button
  if (user_is_logged_in()) {
    $userId = $user->uid;
    $userObj = user_load($userId);
    if(labdoo_is_dooject_followed($nodeObj, $userObj)) {
      $followDoojectUrl = strtok(request_uri(), '?') . "?m=f&d=$nodeId&u=$userId&v=0";
      $followMsg = "Unfollow this dootronic";
      $followIcon = "signal.png";
      $hoverMessage = t('Click to stop receiving updates of this dootronic');
    }
    else {
      $followDoojectUrl = strtok(request_uri(), '?') . "?m=f&d=$nodeId&u=$userId&v=1";
      $followMsg = t("Follow this dootronic");
      $followIcon = "signal-off.png";
      $hoverMessage = t('Click to receive updates about this dootronic');
    }
    $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/".$followIcon."' style='width: 30px; height: 30px;'/>&nbsp;
                <a style='cursor:Pointer;' title='".$hoverMessage."' href='".$followDoojectUrl."'>" .$followMsg."</span></a>&nbsp&nbsp&nbsp";
  }
  else {
    $followDoojectUrl = request_uri() . "/../../content/dooject-update?m=f&d=$nodeId&v=1";
    $followMsg = t("Follow this dootronic");
    $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/signal.png' style='width: 30px; height: 30px;'/>&nbsp;
                <span style='cursor:Pointer; color:grey' title='Log in to modify this field'>".$followMsg."</span>&nbsp&nbsp&nbsp";
  }

  // Pick me up button
  $userId = $user->uid;
  $wDoojectNode = entity_metadata_wrapper('node', $nodeObj);
  $currPickmeFlag = $wDoojectNode->field_pick_me_up->value();
  if($currPickmeFlag) {
    $pickmeupUrl = strtok(request_uri(), '?') . "?m=p&d=$nodeId&u=$userId&v=0";
    $pickmeupMsg = "Pick me up (activated)";
    $pickmeupIcon = 'truck.png';
    $hoverMessage = t('Click to turn off "pick me up"');
  }
  else {
    $pickmeupUrl = strtok(request_uri(), '?') . "?m=p&d=$nodeId&u=$userId&v=1";
    $pickmeupMsg = "Pick me up (deactivated)";
    $pickmeupIcon = 'truck-off.png';
    $hoverMessage = t('Click this link if you want someone from a nearby Labdoo hub to pick up this dootronic from its current location');
  }
  if(node_access("update", $nodeObj, $user)) {
    $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/" . $pickmeupIcon . "' style='width: 35px; height: 30px;'/>&nbsp;
                <a style='cursor:Pointer;' title='".$hoverMessage."' href='".$pickmeupUrl."'>" .$pickmeupMsg."</span></a>&nbsp&nbsp&nbsp";
  }
  else {
    if (user_is_logged_in()) {
      $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/" . $pickmeupIcon . "' style='width: 35px; height: 30px;'/>&nbsp;
                  <span style='color:grey;'>".$pickmeupMsg."</span>&nbsp&nbsp&nbsp";
    }
    else {
      $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/" . $pickmeupIcon . "' style='width: 35px; height: 30px;'/>&nbsp;
                  <span style='cursor:Pointer; color:grey;' title='Log in to modify this field'>".$pickmeupMsg."</span>&nbsp&nbsp&nbsp";
    }
  }

  $htmlCode = $htmlCode . '</td><td align="right">';

  // Right arrow
  $htmlCode = $htmlCode . "<a style='float: right;' href='../laptop/".$nextIdFull."'>
              <img src='/profiles/labdoo/files/pictures/arrow_right.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Returns the previous or next node from a given base node
 *
 * @param object $node The base node
 * @param string $op The operation, one of {'prev', 'next'}
 *
 * @return The ID of the previous or next node
 *
 */
function labdoo_lib_prev_next_node($node, $op) {

  $nid = $node->nid;
  $type = $node->type;

  if($op == 'next') {
    $query = "SELECT nid FROM node WHERE (nid > $nid AND type = '$type') ORDER BY nid LIMIT 1";
    $nodeId = db_query($query)->fetchField();
    if(!$nodeId) { // wrap around
      $query = "SELECT min(nid) FROM node WHERE type = '$type'";
      $nodeId = db_query($query)->fetchField();
    }
  }
  else { // prev
    $query = "SELECT nid FROM node WHERE (nid < $nid AND type = '$type') ORDER BY nid DESC LIMIT 1";
    $nodeId = db_query($query)->fetchField();
    if(!$nodeId) { // wrap around
      $query = "SELECT max(nid) FROM node WHERE type = '$type'";
      $nodeId = db_query($query)->fetchField();
    }
  }
  return $nodeId;
}


/**
 * Generates a table listing all the dootronics linked to a dootrip.
 *
 * @param node $node The dootrip node.
 *
 * @return array The table with the dootronics linked to the dootrip.
 * 
 */
function _generate_dootrip_dootronics_table($node) {
  $dootronicsTable = array();

  // Extract dootronics list
  $wNode = entity_metadata_wrapper('node', $node);
  $doojectsList = $wNode->field_laptops->value();
  if(!$doojectsList) 
    return $dootronicsTable;

  // Add the table header
  $i = 0;
  $j = 0;
  $dootronicsTable[$i][$j++] = "ID";
  $dootronicsTable[$i][$j++] = "Status";
  $dootronicsTable[$i][$j++] = "Model";
  $dootronicsTable[$i][$j++] = "Serial number";
  $dootronicsTable[$i][$j++] = "Watt-hours";
  $dootronicsTable[$i][$j++] = "Weight";

  // For each dootronic, add a row to the table
  foreach($doojectsList as $doojectNode) {
    if(!key_exists('nid', $doojectNode))
      continue;
    $i++;
    $j = 0;
    $doojectLoaded = node_load($doojectNode->nid);
    $wDoojectLoaded = entity_metadata_wrapper('node', $doojectLoaded);
    // Extract the status
    $dootronicsTable[$i][$j++] = "# " . $doojectLoaded->title; 
    // Extract the status
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_status->value();
    // Extract the model 
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_model->value();
    // Extract the serial number 
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_serial_number->value();
    // Extract the watt-hours 
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_battery_watt_hours->value();
    // Extract the weight (hack: should extract Kgms units from the field)
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_dooject_weight->value() . " Kgms"; 
  }

  return($dootronicsTable);
}


/**
 * Renders a dooject's header
 *
 * @return The code to render
 *
 */
function labdoo_render_dootrip_header() {
  global $language;
  $langCode = $language->language;
  $htmlCode = '';

  $nodeObj = node_load(arg(1));
  $prevNodeId = labdoo_lib_prev_next_node($nodeObj, 'prev');
  $nextNodeId = labdoo_lib_prev_next_node($nodeObj, 'next');

  $prevUri = drupal_get_path_alias("node/" . $prevNodeId, $langCode);
  $nextUri = drupal_get_path_alias("node/" . $nextNodeId, $langCode);

  // Table header
  $htmlCode = $htmlCode . '<table align="center" width="1150px"><tr><td align="left" width="60px">';

  // Left arrow
  $htmlCode = $htmlCode . "<a style='float: left;' href='../" . $prevUri . "'>
              <img src='/profiles/labdoo/files/pictures/arrow_left.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  $htmlCode = $htmlCode . '</td><td align="left">';

  // Button to download list of dootronics
  $dootronicsTable = _generate_dootrip_dootronics_table($nodeObj);
  $dootripDownloadButton = labdoo_table_download_button($dootronicsTable, "downloadButtonDootrips", "download-button-data.png", 180);
  $htmlCode = $htmlCode . $dootripDownloadButton;

  $htmlCode = $htmlCode . '</td><td align="center">';

  // Right arrow
  $htmlCode = $htmlCode . "<a style='float: right;' href='../" . $nextUri . "'>
              <img src='/profiles/labdoo/files/pictures/arrow_right.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Displays the header of an edoovillage or a hub.
 *
 * @param integer $nodeId The node identifier of a hub or an edoovillage.
 * @param string $type Determines the type of node corresponding to $nodeId. Can be either "edoovillage" or "hub".
 *
 * @return The renderable header code 
 *
 */
function labdoo_render_edoovillage_hub_header($nodeId = NULL, $type) {
  global $language;

  if($nodeId == NULL) {
    if ((arg(0) != 'node') || !is_numeric(arg(1))) 
      return;
    $nodeId = arg(1);
  }

  // FIXME: this is a bit strange behavior. We should not need to check whether is numeric
  // because node_load should return false if it is not (although i have not checked
  // the internal code for node_load). However, if the user feeds a value like '8a',
  // where '8' is a valide node ID, the node_load actually ends up loading node '8'.
  // So this next clause ensures that this cannot happen.
  if(!is_numeric($nodeId))
    return;

  $nodeObj = node_load($nodeId);
  if($nodeObj == FALSE)
    return;

  $langCode = $language->language;
  $htmlCode = "";

  // Accept only edoovillages and hubs 
  $types = array('hub' => 1, 'edoovillage' => 1);
  if(!isset($types[$nodeObj->type]))
    return;

  // Table header
  $htmlCode = $htmlCode . '<table border="0" cellpadding="1" cellspacing="1" style="width: 920px;"><tbody><tr><td style="width: 400px;">';

  // Photo album icon and button
  if($type == "edoovillage") 
    $field_photo_album = 'field_edoovillage_photo_album';
  else
    $field_photo_album = 'field_hub_photo_album';

  $wNode = entity_metadata_wrapper('node', $nodeObj);
  $nodeAlbum = $wNode->$field_photo_album->value();
  $albumUri = drupal_get_path_alias("node/" . $nodeAlbum->nid, $langCode);

  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
                           <a href="'.$albumUri.'">
                           <img alt="" src="/sites/default/files/content/general-objects/goto-photo-album.png" style="width: 150px; "/></a>';

  if($type == "edoovillage") {
    // Next cell
    $htmlCode = $htmlCode . '</td><td style="width: 800px;">';

    if(!file_exists(dirname(__FILE__) . "/../../../files/pictures/semaphore-red-" . $langCode . ".png"))
      $langCode = 'en';

    // Semaphore
    $semaphorePic = 'semaphore-red-' . $langCode . '.png';
    $semaphoreState = labdoo_lib_get_field($nodeObj, 'field_semaphore', 'node', 'value'); 
    if($semaphoreState == 'yellow')
      $semaphorePic = 'semaphore-yellow-' . $langCode . '.png';
    else if($semaphoreState == 'green')
      $semaphorePic = 'semaphore-green-' . $langCode . '.png';
    $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="center">
                             <img alt="" src="/profiles/labdoo/files/pictures/' . $semaphorePic . '" style="width: 280px; height: 85px; "/></a>';
  }
  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Edoovillage stats 
  $htmlCode = $htmlCode . lbd_display_dooject_column_chart($nodeId, $type);  

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Displays the header of a photo album.
 *
 * @return The renderable header code 
 *
 */
function labdoo_render_photo_album_header() {
  global $language;
  $defaultLanguage = language_default();
  $htmlCode = "";

  if ((arg(0) != 'node') || !is_numeric(arg(1))) 
    return;

  $nodeObj = node_load(arg(1));
  $nodeId = $nodeObj->nid;

  // Accept only certain types of content types
  $types = array('node_gallery_gallery' => 1) ;
  if(!isset($types[$nodeObj->type]))
    return;

  // Table header
  $htmlCode = $htmlCode . '<table border="0" cellpadding="1" cellspacing="1" style="width: 850px;"><tbody><tr><td>';

  // Edoovillage or hub icon and button
  $wNode = entity_metadata_wrapper('node', $nodeObj);
  $gotoIcon = "/sites/default/files/content/general-objects/goto-edoovillage.png";
  $parentNodeType = 'edoovillage';
  $parentNode = $wNode->field_photo_album_edoovillage->value();
  if(!$parentNode) {
    $gotoIcon = "/sites/default/files/content/general-objects/goto-hub.png";
    $parentNodeType = 'hub';
    $parentNode = $wNode->field_photo_album_hub->value();
  }
  $albumUri = drupal_get_path_alias("node/" .  $parentNode->nid, $language->language);
  // First check if the URL has a 'lan' parameter. This is a special fix, please see
  // TODO DE-COLORBOX for more info.
  if(!empty($_GET['lan'])) 
    $albumUri = $_GET['lan'] . "/" . $albumUri;
  else if($language->language != $defaultLanguage->language)
    $albumUri = $language->language . "/" . $albumUri;
  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
                           <a href="/'.$albumUri.'">
                           <img alt="" src="'.$gotoIcon.'" style="width: 150px; "/></a>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Edoovillage stats 
  $htmlCode = $htmlCode . lbd_display_dooject_column_chart($parentNode->nid, $parentNodeType);  

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Generates a comma-separated list of emails that need
 * to be notified upon a change of status of a dooject
 *
 * @param node The dooject's node
 *
 */
function labdoo_dooject_extract_emails($node) {
    $emailsList = "";
    $emailSet = array();

    if($node->field_tagger) {
      foreach(field_get_items('node', $node, 'field_tagger') as $element) {
        $userObj = user_load($element['target_id']);
        if(in_array($userObj->mail, $emailSet))
          continue;
        $emailsList = $emailsList . ", " . $userObj->mail;
        array_push($emailSet, $userObj->mail);
      }
    }

    if($node->field_manager) {
      foreach(field_get_items('node', $node, 'field_manager') as $element) {
        $userObj = user_load($element['target_id']);
        if(in_array($userObj->mail, $emailSet))
          continue;
        $emailsList = $emailsList . ", " . $userObj->mail;
        array_push($emailSet, $userObj->mail);
      }
    }
 
    if(property_exists($node, 'field_additional_followers')) {
      if($node->field_additional_followers) {
        foreach(field_get_items('node', $node, 'field_additional_followers') as $element) {
          $userObj = user_load($element['target_id']);
          if(in_array($userObj->mail, $emailSet))
            continue;
          $emailsList = $emailsList . ", " . $userObj->mail;
          array_push($emailSet, $userObj->mail);
        }
      }
    }

    if($node->field_additional_notification_em) {
      foreach(field_get_items('node', $node, 'field_additional_notification_em') as $element) {
        if(in_array($element["email"], $emailSet))
          continue;
        $emailsList = $emailsList . ", " . $element["email"];
        array_push($emailSet, $element["email"]);
      }
    }

    $doojectStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value'); 
    if(($doojectStatus == "T1" || $doojectStatus == "S4" || $doojectStatus == "S3")) {
      if(property_exists($node, 'field_edoovillage_destination')) {
        if($node->field_edoovillage_destination) {
          foreach(field_get_items('node', $node, 'field_edoovillage_destination') as $element) {
            $edoovillageNode = node_load($element['target_id']);
            if($edoovillageNode->field_project_manager_s_) {
              foreach(field_get_items('node', $edoovillageNode, 'field_project_manager_s_') as $element2) {
                $userObj = user_load($element2['target_id']);
                if(in_array($userObj->mail, $emailSet))
                  continue;
                $emailsList = $emailsList . ", " . $userObj->mail;
                array_push($emailSet, $userObj->mail);
              }
            }
            if($edoovillageNode->field_edoo_additional_followers) {
              foreach(field_get_items('node', $edoovillageNode, 'field_edoo_additional_followers') as $element2) {
                $userObj = user_load($element2['target_id']);
                if(in_array($userObj->mail, $emailSet))
                  continue;
                $emailsList = $emailsList . ", " . $userObj->mail;
                array_push($emailSet, $userObj->mail);
              }
            }
            if($edoovillageNode->field_edoo_additional_notif_em) {
              foreach(field_get_items('node', $edoovillageNode, 'field_edoo_additional_notif_em') as $element2) {
                if(in_array($element2["email"], $emailSet))
                  continue;
                $emailsList = $emailsList . ", " . $element2["email"];
                array_push($emailSet, $element2["email"]);
              }
            }
          }
        }
      }
    }

    if($node->field_hub_laptop) {
      foreach(field_get_items('node', $node, 'field_hub_laptop') as $element) {
        $hubNode = node_load($element['target_id']);
        if($hubNode->field_hub_manager_s_) {
          foreach(field_get_items('node', $hubNode, 'field_hub_manager_s_') as $element2) {
            $userObj = user_load($element2['target_id']);
            if(in_array($userObj->mail, $emailSet))
              continue;
            $emailsList = $emailsList . ", " . $userObj->mail;
            array_push($emailSet, $userObj->mail);
          }
        }
      }
    }
    
    $emailsList = $emailsList . ", " . variable_get('site_mail', '');

    if($emailsList[0] == ",")
      $emailsList = substr($emailsList, 2);

    return $emailsList; 
}


/**
 * Generates a comma-separated list of emails that need
 * to be notified upon a change of status of a dootrip
 *
 * @param node $node
 *   The dooject's node
 *
 */
function labdoo_dootrip_extract_emails($node) {
    $emailsList = "";
    $emailSet = array();

    foreach(field_get_items('node', $node, 'field_dootripper_s_') as $element) {
      $userObj = user_load($element['target_id']);
      if(in_array($userObj->mail, $emailSet))
        continue;
      $emailsList = $emailsList . ", " . $userObj->mail;
      array_push($emailSet, $userObj->mail);
    }

    if($node->field_dootrip_additional_emails) {
      foreach(field_get_items('node', $node, 'field_dootrip_additional_emails') as $element) {
        if(in_array($element["email"], $emailSet))
          continue;
        $emailsList = $emailsList . ", " . $element["email"];
        array_push($emailSet, $element["email"]);
      }
    }

    $emailsList = $emailsList . ", " . variable_get('site_mail', '');

    if($emailsList[0] == ",")
      $emailsList = substr($emailsList, 2);

    return $emailsList; 
}


/**
 * Implementation of hook_node_update
 *
 */
function labdoo_lib_node_update($node) {

  if($node->type == 'laptop') {

    /*
     * Automatically update the location of a dooject
     * to match that of its assigned edoovillage for states
     * T1 or S4.
     */
    $doojectStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value'); 
    if(($doojectStatus == "T1" || $doojectStatus == "S4")) {
      // Use a PHP shutdown callback (invoked upon exiting the PHP thread)
      // to ensure the node has been stored in the database prior to updating the location.
      // FIX: this can also be done using hook_node_presave
      //      just like we are doing with other fields.
      //      For now we leave it here as an example of an alternative technique.
      register_shutdown_function('_update_dooject_location_from_edoovillage', $node);
      drupal_set_message(t('The location of this dooject has been automatically assigned to the location of its edoovillage.'), 'status', FALSE);
    }
  }

  return;
}


/**
 * Creates a photo album node
 *
 * @param node $node parent node (an edoovillage or a hub)
 *
 * @return The node id of the newly created photo album
 *
 */
function _create_photo_album($node) {
  global $user;
  $nodeAlbum = new stdClass();
  $nodeAlbum->type = 'node_gallery_gallery';
  node_object_prepare($nodeAlbum);
  $nodeAlbum->title = $node->title . " - Photo Album";
  $nodeAlbum->language = LANGUAGE_NONE;
  ## Don't copy location, since the location is already tracked by the edoovillage.
  ## This way we don't have to update this field when there is a change.
#  $nodeAlbum->locations = $node->locations;
  $nodeAlbum->created = time();
  $nodeAlbum->changed = $nodeAlbum->created;
  $nodeAlbum->status = 1;
  $nodeAlbum->promote = 0;
  $nodeAlbum->sticky = 0;
  $nodeAlbum->format = 2;
  $nodeAlbum->uid = $user->uid;
  node_save($nodeAlbum);
  return($nodeAlbum->nid);
}


/**
 * Allocate a new dooject ID
 *
 * @return The new ID
 *
 */
function lbd_allocate_dooject_id() {

  $query = "SELECT title FROM node WHERE type='laptop' ORDER BY title ASC";
  $result = db_query($query);

  // The following algorithm searches for any possible
  // holes in the Labdoo ID space and if none, allocates the next 
  // smallest ID
  $potentialId = 1;
  foreach($result as $item) {
    $thisId = intval($item->title);
    if($potentialId < $thisId)
      break;
    $potentialId++;
  }
  return($potentialId); 
}


/**
 * Allocate a new dootrip ID
 *
 * @return The new ID
 *
 */
function lbd_allocate_dootrip_id() {

  $query = "SELECT title FROM node WHERE type='dootrip' ORDER BY title ASC";
  $result = db_query($query);

  // The following algorithm searches for any possible
  // holes in the Labdoo ID space and if none, allocates the next 
  // smallest ID
  $potentialId = 1;
  foreach($result as $item) {
    $dootripWords = explode(' ', $item->title);
    $dootripNumber = explode('#', $dootripWords[1]);
    $thisId = intval($dootripNumber[1]);
    if($potentialId < $thisId)
      break;
    $potentialId++;
  }
  return($potentialId); 
}


/**
 * Extracts the dootrip ID from a dootrip title
 *
 * @param  string $dootripTitle The title of the dootrip
 *
 * @return The dootrip ID
 *
 */ 
function lbd_extract_dootrip_id($dootripTitle) {
  $dootripWords = explode(' ', trim($dootripTitle));
  $dootripNumber = explode('#', $dootripWords[1]);
  return $dootripNumber[1];
}


/**
 * Implementation of hook_node_presave
 *
 */
function labdoo_lib_node_presave($node) {

  if(!property_exists($node, 'original') && $node->type == 'laptop') {
    /*
     * Update the title and path alias
     */
    // The Labdoo identifier of each
    // laptop is stored as the node's title
    $laptopIdInt = lbd_allocate_dooject_id();
    $node->title = sprintf("%09d", $laptopIdInt);
  }

  if($node->type == 'laptop') {
    // Add laptop path alias for 1.0 compatibility.
    // There are basically two ways to access a laptop:
    // via laptop/$ID or content/$ID
    $path = 'laptop/' . $node->title;
    $node->path = array('alias' => $path);

    // If not set, make a best estimate of its GPS coordinates
    $location = $node->locations[0]; 
    if($location && (!array_key_exists('latitude', $location) || !array_key_exists('longitude', $location))) {
      // Attempt to find out the coordinates.
      // Latitude and longitude are passed as reference.
      $ret = labdoo_lookup_coordinates($location['country'], 
                                       $location['city'], 
                                       $node->locations[0]['latitude'], 
                                       $node->locations[0]['longitude'],
                                       $silent=True,
                                       $location['street'],
                                       $location['province'],
                                       $location['postal_code'],
                                       10);
      if($ret == 0) { // If successful, do not let the system attempt to geolocate it anymore
        $node->locations[0]['inhibit_geocode'] = TRUE;
      }
      else {
        $node->locations[0]['inhibit_geocode'] = FALSE;
      }
    }

    # If status is set back to a 'non-edoovillage assigned state', remove the edoovillage
    $doojectStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value');
    if(preg_match('(S0|S1|S2)', $doojectStatus)) {
      $wNode = entity_metadata_wrapper('node', $node);
      $wNode->field_edoovillage_destination->set(0); // It expects a node ID; setting it to zero seems to do it
    }

  }

  if($node->type == 'edoovillage') {
    /*
     * Update title in case any of its parts was modified
     */
    $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
    $nodeCity = $node->locations[0]['city'];
    if($nodeCountry == "[country not defined]")
      $node->title = $nodeCity . ": " . labdoo_lib_get_field($node, 'field_project_summary', 'node', 'value');
    else
      $node->title = $nodeCountry . ", " . $nodeCity . ": " . labdoo_lib_get_field($node, 'field_project_summary', 'node', 'value');

    $wNode = entity_metadata_wrapper('node', $node);
    if(!property_exists($node, 'original')) {
      // Create this edoovillage's photo album
      $albumNid = _create_photo_album($node);
      $wNode->field_edoovillage_photo_album->set($albumNid);
    }
    else {
      // Just update the edoovillage's photo album title if there were any changes
      $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
      $loadedNodeAlbum = node_load($nodeAlbum->nid);
      $loadedNodeAlbum->title = $node->title . " - Photo Album";;
      node_save($loadedNodeAlbum);
    }
  }

  if($node->type == 'hub') {
    $wNode = entity_metadata_wrapper('node', $node);
    if(!property_exists($node, 'original')) {
      // Create this hub's photo album
      $albumNid = _create_photo_album($node);
      $wNode->field_hub_photo_album->set($albumNid);
    }
    else {
      // Just update the hub's photo album title if there were any changes
      $nodeAlbum = $wNode->field_hub_photo_album->value();
      $loadedNodeAlbum = node_load($nodeAlbum->nid);
      $loadedNodeAlbum->title = $node->title . " - Photo Album";;
      node_save($loadedNodeAlbum);
    }
    // Update the parent hub nodes (the original and the new one if any)
    // to make sure its computed field_branches field is most up to date.
    // _update_hub needs to run as a callback after this hub is saved
    // to ensure it gets the most up to date state.
    if(property_exists($node, 'original')) {
      $wNodeOriginal = entity_metadata_wrapper('node', $node->original);
      $originalParentHub = $wNodeOriginal->field_parent_hub->value();
      if($originalParentHub)
        register_shutdown_function('_update_hub', $originalParentHub);
    }
    $parentHub = $wNode->field_parent_hub->value();
    if($parentHub)
      register_shutdown_function('_update_hub', $parentHub);
  }

  if($node->type == 'dootrip') {
    /*
     * Update the title
     */
    if(!property_exists($node, 'original')) {
      $dootripId = lbd_allocate_dootrip_id();
    }
    else {
      $dootripId = lbd_extract_dootrip_id($node->title);
    }
    $dootripTitle = _generate_dootrip_title($node, $dootripId);
    $node->title = $dootripTitle;
    /*
     * Update GPS coordinates
     */
    $allLocations = field_get_items('node', $node, 'field_origin_of_the_trip');
    $location = $allLocations[0];
    $ret = labdoo_lookup_coordinates($location['country'], 
                                     $location['city'], 
                                     $node->field_origin_of_the_trip['und'][0]['latitude'], 
                                     $node->field_origin_of_the_trip['und'][0]['longitude']);
    if($ret == 0) // If successful, do not let the system attempt to geolocate it anymore
      $node->field_origin_of_the_trip['und'][0]['inhibit_geocode'] = TRUE;

    $allLocations = field_get_items('node', $node, 'field_destination_of_the_trip');
    $location = $allLocations[0];
    $ret = labdoo_lookup_coordinates($location['country'], 
                                     $location['city'], 
                                     $node->field_destination_of_the_trip['und'][0]['latitude'], 
                                     $node->field_destination_of_the_trip['und'][0]['longitude']);
    if($ret == 0) 
      $node->field_destination_of_the_trip['und'][0]['inhibit_geocode'] = TRUE;
  }

  if(property_exists($node, 'original') && $node->type == 'book') {
    if($node->field_is_first_page[$node->language][0]['value'] == 1)  {
      $node->field_reference_book[$node->language][0]['target_id'] = $node->nid;
    }
  }

  // If it's a newly created picture for a photo album, set the title
  // to "Picture". Trick: instead of using 'original' to check if this
  // is a new node, we use 'vid' because it is a more reliable indicator
  // due to the way photo albums allow users to modify and save pics.
  if(!property_exists($node, 'vid') && $node->type == 'node_gallery_item') {
    $node->title = "Picture";
  }

  return;
}


/**
 * Implementation of hook_node_insert
 *
 */
function labdoo_lib_node_insert($node) {

  if($node->type == 'edoovillage') {
    // Link this edoovillage's photo album back to the edoovillage itself
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
    $loadedNodeAlbum = node_load($nodeAlbum->nid);
    $wNodeAlbum = entity_metadata_wrapper('node', $loadedNodeAlbum);
    $wNodeAlbum->field_photo_album_edoovillage->set($node->nid);
    $wNodeAlbum->save();
  }

  if($node->type == 'hub') {
    // Link this hub's photo album back to the edoovillage itself
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_hub_photo_album->value();
    $loadedNodeAlbum = node_load($nodeAlbum->nid);
    $wNodeAlbum = entity_metadata_wrapper('node', $loadedNodeAlbum);
    $wNodeAlbum->field_photo_album_hub->set($node->nid);
    $wNodeAlbum->save();
  }

  if($node->type == 'book') {
    if($node->field_is_first_page[$node->language][0]['value'] == 1)  {
      // This book is newly created, we still don't know its nid,
      // so use register_shutdown_function to update its book reference
      register_shutdown_function('_update_book_reference', $node);
    }
  } 

  return;
}


/**
 * Implementation of hook_node_delete
 *
 */
function labdoo_lib_node_delete($node) {

  if($node->type == 'edoovillage') {
    // Delete photo album associated with edoovillage
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
    node_delete($nodeAlbum->nid);
    // Delete action associated with edoovillage
    $query = "SELECT entity_id FROM field_data_field_action_type WHERE (field_action_type_value='Edoovillage' AND
              entity_id IN 
              (SELECT entity_id FROM field_data_field_edoovillage_action WHERE field_edoovillage_action_target_id=$node->nid))"; 
    $actionNodeId = db_query($query)->fetchField();
    node_delete($actionNodeId);
  }

  if($node->type == 'hub') {
    // Delete photo album associated with hub
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_hub_photo_album->value();
    node_delete($nodeAlbum->nid);
    // Delete action associated with hub 
    $query = "SELECT entity_id FROM field_data_field_action_type WHERE (field_action_type_value='Hub' AND
              entity_id IN 
              (SELECT entity_id FROM field_data_field_hub_action WHERE field_hub_action_target_id=$node->nid))"; 
    $actionNodeId = db_query($query)->fetchField();
    node_delete($actionNodeId);
  }

  return;
}


/**
 * Implementation of hook_form_node_form_alter
 *
 */
function labdoo_lib_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  /*
   * Node is a laptop
   */
  if($form_id == 'laptop_node_form') {

    /*
     * Hide the title from the form
     * so that users can't write to it.
     * That's done because the title is
     * programmatically given the value of
     * the laptop's Labdoo ID
     */
    unset($form['title']);

    /*
     * Defaults for node creation
     */
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      if(empty($form['field_tagger']['und'][0]['target_id']['#default_value'])) {    
        $form['field_tagger']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
        $form['field_manager']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
      }
    }
  }

  /*
   * Node is a dootrip
   */
  if($form_id == 'dootrip_node_form') {

    // Hide title
    unset($form['title']);

    /*
     * Defaults for node creation
     */
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      if(empty($form['field_dootripper_s_']['und'][0]['target_id']['#default_value'])) {    
        $form['field_dootripper_s_']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
      }
    }

  }

  /*
   * Node is an edoovillage
   */
  if($form_id == 'edoovillage_node_form') {
    // Hide title and photo album
    unset($form['title']);
    $form['field_edoovillage_photo_album']['#access'] = FALSE;
  }

  /*
   * Node is a hub
   */
  if($form_id == 'hub_node_form') {
    // Hide photo album 
    $form['field_hub_photo_album']['#access'] = FALSE;
  }

  /*
   * Node is a superhub page 
   */
//  if($form_id == 'superhub_page_node_form') {
//
    // Hide title
//    unset($form['title']);
//  }

  /*
   * Hide book form for all non-book types
   */
  if($form_id != 'book_node_form') {

    // Hide book form 
    unset($form['book']);
  }

  /*
   * Wall node form
   */
  if($form_id == 'drupal_wall_node_form') {

    // Hide title
    unset($form['title']);
  }

  if($form_id == 'team_page_node_form') {
    // Only show the field to associate a conversation
    // with an edoovillage if this conversation belongs
    // to the QA team.
    $groupId = lbd_teams_page_group_id();
    $groupPath = drupal_get_path_alias("node/$groupId");
    if(strcmp($groupPath, "content/quality-assurance-qa") != 0) {
      $form['field_are_you_a_student_teacher_']['#access'] = FALSE;
      $form['field_team_my_edoovillage']['#access'] = FALSE;
    }
  }

  return;
}


/**
 * Implements hook_form_user_profile_form_alter
 *
 */
function labdoo_lib_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  $userRoles = array_values($user->roles);

  if(!in_array('hub manager', $userRoles)) {
    // If it's not a hub manager, hide the hub manager notifications field group
    field_group_hide_field_groups($form, array('group_hub_manager_notifications'));
  }

  return;
}


/**
 * Implements hook_form_alter
 *
 */
function labdoo_lib_form_alter(&$form, &$form_state, $form_id) {

  // Do not show the hub manager notification options during registration
  if($form_id == 'user_register_form')
    field_group_hide_field_groups($form, array('group_hub_manager_notifications'));

  // If its a dootrip and if this is a cloning operation, reset some values to avoid
  // possible mistakes
  if($form_id == 'dootrip_node_form' && (strpos(drupal_get_path_alias(current_path()), 'clone/confirm')) != FALSE) {
    foreach($form['field_laptops'][LANGUAGE_NONE] as $key => $dootronicTargetId)
      if(is_numeric($key))
        unset($form['field_laptops'][LANGUAGE_NONE][$key]['target_id']['#default_value']) ;
    unset($form['field_departure_date'][LANGUAGE_NONE][0]['#default_value']['value']) ;
    unset($form['field_arrival_date'][LANGUAGE_NONE][0]['#default_value']['value']);
    unset($form['field_status_dootrip'][LANGUAGE_NONE]['#default_value']) ;
  }

  return;
}


/** 
 * Calculates the total number of objects 
 * 
 * @param string $objectType Object type, can be one of: {'laptop', 'dootrip', 'edoovillage', 'hub', 'student', 'country'}
 * @return The total number of doojects in the Labdoo inventory 
 *  
 */
function lbd_get_total_num_objects($objectType) {

  if($objectType == 'student') {
    $query = "SELECT SUM(field_number_of_students_value) FROM field_data_field_number_of_students";
  }
  else if($objectType == 'country') {
    $query = "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM location WHERE lid IN (SELECT lid FROM location_instance WHERE nid!=0 ORDER by nid)) AS countries";
  }
  else {
    $query = "SELECT COUNT(*) FROM node WHERE type='$objectType'";
  }

  $num = db_query($query)->fetchField();
  if(!$num)
    return 0;

  return($num);
}


/**
 * _update_city
 *
 */
function _update_city($lid, &$objectsCount) {  

  if(!$lid)
    return;

  $country_names = location_get_iso3166_list();

  $query = "SELECT city, country FROM location WHERE lid=$lid";
  $city = db_query($query)->fetchObject()->city;
  $country = db_query($query)->fetchObject()->country;
  $query = "SELECT latitude, longitude FROM location WHERE lid=$lid";
  $lat = db_query($query)->fetchObject()->latitude;
  $lon = db_query($query)->fetchObject()->longitude;
  if($lat == 0 and $lon == 0)
    labdoo_lookup_coordinates($country, $city, $lat, $lon, $silent=True);

  if(array_key_exists($country, $country_names))
    $countryExt = $country_names[$country];
  else 
    $countryExt = $country;

  if(!isset($objectsCount[strtoupper($city)]))
  {
    $objectsCount[strtoupper($city)]['count'] = 0;
    $objectsCount[strtoupper($city)]['lat'] = $lat;
    $objectsCount[strtoupper($city)]['lon'] = $lon;
    $objectsCount[strtoupper($city)]['country'] = $countryExt;
  }

  $objectsCount[strtoupper($city)]['count']++;
  $objectsCount[strtoupper($city)]['city'] = $city;
  return;
}


/** 
 * Calculates the number of objects for each city
 * 
 * @param type The type of objects 
 * @param selectedNids If not NULL, an array of node IDs that are to be used 
 * @return An array indexed by the name of the city in capital letters
 * and with various fields: 
 *
 *   'count': The number of doojects in the city
 *     'lat': The latitude of the city
 *     'lon': The longitude of the city
 * 'country': The country of the city 
 *  
 */ 
function labdoo_getnum_objects_by_city($type, $selectedNids = NULL) {

  $objectsCount = array();
  $query = "SELECT nid, vid FROM node WHERE type='$type'";
  $objects = db_query($query);

  foreach($objects as $object) {
    if(is_array($selectedNids) and !in_array($object->nid, $selectedNids))
      continue; 
    if($type == "dootrip") {
      $query = "SELECT field_origin_of_the_trip_lid AS lid FROM field_data_field_origin_of_the_trip 
                WHERE entity_id=$object->nid";
      $lid = db_query($query)->fetchField();
      _update_city($lid, $objectsCount);
      $query = "SELECT field_destination_of_the_trip_lid AS lid FROM field_data_field_destination_of_the_trip 
                WHERE entity_id=$object->nid";
      $lid = db_query($query)->fetchField();
      _update_city($lid, $objectsCount);
    }
    else {
      $query = "SELECT lid FROM location_instance WHERE nid=$object->nid AND vid=$object->vid";
      $lid = db_query($query)->fetchField();
      _update_city($lid, $objectsCount);
    }
  } 

  return $objectsCount;
}

/**
 * Calculates the total number of doojects in demand 
 *
 * @param edoovillageId node ID of the edoovillage we want to find the demand for 
 * @param hubId node ID of the hub we want to find the demand for 
 * @param $doAverage calculate the fair share of demand that a hub should take
 * for each edoovillage, understood as demand divided by the number of hubs
 * taking care of that edoovillage
 *
 */
function labdoo_get_demand($edoovillageId, $hubId, $doAverage) {

  if($doAverage) {

    if($hubId) {

      $query = "SELECT SUM(b.field_number_of_laptops_needed_value / a.numberHubs) 
                FROM 
                  (SELECT COUNT(*) numberHubs, entity_id 
                    FROM field_data_field_hub WHERE entity_id IN (SELECT entity_id 
                      FROM field_data_field_hub WHERE field_hub_target_id=$hubId) GROUP BY entity_id) a 
                INNER JOIN 
                  (SELECT entity_id, field_number_of_laptops_needed_value 
                    FROM field_data_field_number_of_laptops_needed  WHERE entity_id IN (SELECT entity_id 
                      FROM field_data_field_hub WHERE field_hub_target_id=$hubId)) b ON a.entity_id = b.entity_id";

    }
    else {

      // TODO: not implemented yet
      return -1;

    }

  }

  else {

    if($hubId) {
 
      $query = "SELECT SUM(field_number_of_laptops_needed_value) 
                FROM field_data_field_number_of_laptops_needed 
                WHERE entity_id IN (SELECT entity_id 
                FROM field_data_field_hub WHERE field_hub_target_id=$hubId)"; 

    }

    else if($edoovillageId) {

      $query = "SELECT SUM(field_number_of_laptops_needed_value) 
                FROM field_data_field_number_of_laptops_needed WHERE entity_id=$edoovillageId"; 

    }

    else {

      $query = "SELECT SUM(field_number_of_laptops_needed_value) FROM field_data_field_number_of_laptops_needed"; 

    }

  }

  $numLaptops = db_query($query)->fetchField();
  if(!$numLaptops)
    return 0;

  return $numLaptops;
}


/** 
 * Calculates the number of doojects assigned 
 * to an edoovillage or a hub in a given state
 *
 * @param integer $edoovillageId The ID of an edoovillage 
 * @param integer $hubId The ID of a hub 
 * @param string $status The status of the laptops
 *
 * @return The number of doojects in the status $status that
 * are assigned to the given edoovillage or hub
 * 
 */ 
function labdoo_getnum_doojects($edoovillageId, $hubId, $status) {

  $country_names = location_get_iso3166_list();

  if($hubId) 
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
              AND entity_id IN (SELECT entity_id FROM field_data_field_hub_laptop WHERE field_hub_laptop_target_id=$hubId)"; 
  else if($edoovillageId)
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
              AND entity_id IN (SELECT entity_id FROM field_data_field_edoovillage_destination 
              WHERE field_edoovillage_destination_target_id=$edoovillageId)"; 
  else
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status'"; 

  $numLaptops = db_query($query)->fetchField();

  return $numLaptops;
}


/**
 * Returns the title of a node
 *
 * @param nodeId The ID of a node
 *
 * @return The title of the node 
 * 
 */
function lbd_nodeid2title($nodeId)
{
    $title = db_query("SELECT title FROM node WHERE nid = :nid ", array(':nid' => $nodeId))->fetchField();
    return $title; 
}


/**
 * Returns the node ID from the title of the node 
 *
 * @param title The title of the node 
 * @param type If set, the type of node (used to help reduce possible collisions) 
 *
 * @return The ID of a node
 * 
 */
function lbd_title2nodeid($title, $type=NULL)
{
  if($type)
    $result = db_query("SELECT nid FROM node WHERE title=:title AND type=:type", array(":title"=> $title, ":type"=> $type));
  else
    $result = db_query("SELECT nid FROM node WHERE title=:title", array(":title"=> $title));
  return $result->fetchField();
}


/**
 * Returns the node id of given a laptop identifier
 *
 * @param laptopId The ID of a laptop
 *
 * @return The node ID 
 * 
 */
function lbd_laptopid2nodeid($laptopId)
{
    $nodeId = db_query("SELECT nid FROM node WHERE title =:tit", array(':tit' => $laptopId))->fetchField();
    return $nodeId;
}


/**
 * lbd_generate_qrcode
 *
 * @param tag dooject identifier
 * @param widthHeight height of the QR code
 * @param EC_level error correction level
 * @param margin margin 
 *
 */
function lbd_generate_qrcode($tag, $widthHeight ='60', $EC_level='L', $margin='0') {
  $thisTag = urlencode("http://www.labdoo.org/laptop/".$tag);
  echo '<img src="http://chart.apis.google.com/chart?chs='.$widthHeight.
       'x'.$widthHeight.'&cht=qr&chld='.$EC_level.'|'.$margin.
       '&chl='.$thisTag.'" alt="QR code" widthHeight="'.$widthHeight.
       '" widthHeight="'.$widthHeight.'"/>';
  return;
}


/**
 * Returns the watt-hours of a dooject
 *
 * @param node $nodeLoaded The dooject node (loaded)
 *
 * @return The watt-hours
 *
 */
function labdoo_lib_compute_watt_hours($nodeLoaded) {
  // If the Wh field is present, then print it in the label
  $volts = labdoo_lib_get_field($nodeLoaded, 'field_volts', 'node', 'value');
  $ampHours = labdoo_lib_get_field($nodeLoaded, 'field_amp_hours', 'node', 'value');

  $wattageHour = "Not available";

  if($volts != "" && $ampHours != "") {
    $Wh = round($volts * $ampHours / 1000, 1); 
    $wattageHour = $Wh . "Wh";
  }
  return($wattageHour);
}


/**
 * Given a hub, it returns the node IDs of its branches
 *
 * @param node $nodeLoaded The hub node (loaded)
 *
 * @return The list of node IDs of the hub branches
 *
 */
function labdoo_lib_hub_branches_list($nodeLoaded) {
  $query = "SELECT entity_id FROM field_data_field_parent_hub WHERE field_parent_hub_target_id=$nodeLoaded->nid";
  $result = db_query($query);

  $branchIdList = array();
  foreach($result as $item) {
    array_push($branchIdList, $item->entity_id);
  }
 
  return($branchIdList);
}


/**
 * Returns the list of branches associated with a hub 
 *
 * @param node $nodeLoaded The hub node (loaded)
 *
 * @return The list of hubs as a code string 
 *
 */
function labdoo_lib_compute_hub_branches($nodeLoaded) {
  $hubBranches = labdoo_lib_hub_branches_list($nodeLoaded);

  $branchesCode = "";
  $branchesList = array();
  foreach($hubBranches as $hubBranch) {
    $parentHubName = lbd_nodeid2title($hubBranch);
    $parentHubUri = 'node/' . $hubBranch;
    // Add a comment with the $parentHubName to allow for alphabetic ordering 
    array_push($branchesList, '<!--' . $parentHubName . '--><a href="' . $parentHubUri . '">' . $parentHubName . '</a>');
  }
  sort($branchesList);

  $branchesCode = implode("<br/>", $branchesList);
  if($branchesCode == "")
    $branchesCode = "None";

  return($branchesCode);
}


/**
 * Returns the list of edoovillages related to a dootrip
 *
 * @param node $nodeLoaded The dootrip node (loaded)
 *
 * @return The list of edoovillages as a string 
 *
 */
function labdoo_lib_compute_dootrip_edoovillages($nodeLoaded) {
  $query = "SELECT DISTINCT(field_edoovillage_destination_target_id) FROM field_data_field_edoovillage_destination 
            WHERE entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops 
            WHERE entity_id=$nodeLoaded->nid)";
  $result = db_query($query);

  $edoovillagesList = "";
  foreach($result as $item) {
    $edoovillageName = lbd_nodeid2title($item->field_edoovillage_destination_target_id);
    $edoovillageUri = '../node/' . $item->field_edoovillage_destination_target_id;
    $edoovillagesList .= '<a href="' . $edoovillageUri . '">' . $edoovillageName . '</a>'; 
    $edoovillagesList .= "<br/>";
  }

  if($edoovillagesList == "")
    $edoovillagesList = "None";

  return($edoovillagesList);
}


/**
 * Returns the username of the user entity passed
 *
 * @param array $entity The user entity
 *
 * @return The username
 *
 */
function labdoo_lib_compute_username($entity) {
  return($entity->name);
}


/**
 * Returns the list of dootronics associated to a hub managed by a user
 *
 * @param user $userId The ID of the user
 *
 * @return The list of dootronics
 *
 */
function labdoo_lib_user2hub2dootronic($userId) {
  $dootronicsList = array();
  $query = "SELECT entity_id FROM field_data_field_hub_laptop WHERE field_hub_laptop_target_id IN 
            (SELECT entity_id FROM field_data_field_hub_manager_s_ WHERE field_hub_manager_s__target_id=$userId);";
  $result = db_query($query);
  foreach($result as $dootronic) 
    array_push($dootronicsList, $dootronic->entity_id);
  return($dootronicsList);
}


/**
 * Returns the list of dootronics associated to an edoovillage managed by a user
 *
 * @param user $userId The ID of the user
 *
 * @return The list of dootronics
 *
 */
function labdoo_lib_user2edoovillage2dootronic($userId) {
  $dootronicsList = array();
  $query = "SELECT entity_id FROM field_data_field_edoovillage_destination WHERE field_edoovillage_destination_target_id IN 
            (SELECT entity_id FROM field_data_field_project_manager_s_ WHERE field_project_manager_s__target_id=$userId);";
  $result = db_query($query);
  foreach($result as $dootronic) 
    array_push($dootronicsList, $dootronic->entity_id);
  return($dootronicsList);
}


/**
 * Implements hook_node_access
 *
 */
function labdoo_lib_node_access($node, $op, $account) {

  // For logged in users accessing a dootronic page, check
  // if the user should have extra access rights due to
  // its relationship paths (e.g. via hub, via edoovillage)
  // with the dootronic
  if(!user_is_logged_in()) 
    return NODE_ACCESS_IGNORE;

  if(!property_exists($node, 'type'))
    return NODE_ACCESS_IGNORE;
    
  if($node->type == 'laptop') {
    $dootronicsList = labdoo_lib_user2hub2dootronic($account->uid);
    if(in_array($node->nid, $dootronicsList)) {
      return NODE_ACCESS_ALLOW;
    }
    $dootronicsList = labdoo_lib_user2edoovillage2dootronic($account->uid);
    if(in_array($node->nid, $dootronicsList)) {
      return NODE_ACCESS_ALLOW;
    }
  }

  return NODE_ACCESS_IGNORE;
}


/**
 * Implements hook_node_view
 *
 */
function labdoo_lib_node_view($node, $view_mode) {
  global $language;
  global $user;

  // TODO DE-COLORBOX: temporary fix. This forces a redirect of all photo galleries in German language
  // to the default language English, because there is a bug that prevents them from loading the 
  // colorbox slideshow. We also add a URL parameter 'lan=de' so that the links in the photo album
  // can be dynamically set to point back to the 'de' pages.
  // Upon fixing this bug, the following redirect can be removed.
  // See also https://www.labdoo.org/content/slideshow-feature-does-not-work-german-de-language
  if($language->language == 'de' && $node->type == 'node_gallery_gallery' && $view_mode == 'full' && arg(0) == 'node') {
    $options = array('query' => array('lan' => 'de'));
    drupal_goto('../' . drupal_get_path_alias("node/" .  $node->nid), $options);
  }

  if($node->type == 'laptop') {
    $method = '';
    $dooject = '';
    $usr = '';
    $value = '';
    $dooject = $hub = NULL;
    if(!empty($_GET['m']))
      $method = $_GET['m'];
    if(!empty($_GET['d']))
      $dooject = $_GET['d'];
    if(!empty($_GET['u']))
      $usr = $_GET['u'];
    else {
      global $user;
      $usr = $user->uid;
    }
    if(!empty($_GET['v'])) 
      $value = $_GET['v'];
    if($method != '' && $dooject != '' && $usr != '' && $dooject != '') {
      if($method == 'p' && node_access("update", $node, $user)) 
        labdoo_update_flags_dooject($method, $dooject, $usr, $value);
      if($method == 'f')
        labdoo_update_flags_dooject($method, $dooject, $usr, $value);
    }
  }

  // Handle page redirects here

  $languages = language_list();
  $path = drupal_get_path_alias(current_path());

  if(($node->type == 'edoovillage') && (strcmp($path, "edoovillage") != 0) && ($view_mode == 'full')) {
    drupal_goto('edoovillage', array('language' => $languages[$language->language], 'query' => array('e' => $node->nid)));
  }

  if(($node->type == 'hub') && (strcmp($path, "hub") != 0) && ($view_mode == 'full')) {
    drupal_goto('hub', array('language' => $languages[$language->language], 'query' => array('h' => $node->nid)));
  }

  return;
}


/**
 * Prints the labels of a dooject
 *                                 
 * @param laptopid The ID of the dooject 
 *
 */
function lbd_print_dooject_labels($laptopid = NULL) {

  $query = explode('&', $_SERVER['QUERY_STRING']);
  $params = array();

  print(
    t('Print and attach these three labels to: (1) the device, (2) the power adaptor and (3)
       inside the battery compartment of the device. You can omit the third tag if the device has no battery
       compartment. Check this <a href="/profiles/labdoo/files/pictures/tagging-flow.png" class="colorbox-load">drawing</a> if in doubt.')
  );

  foreach($query as $param) {
    $keyPair = explode('=', $param);
    if($keyPair[0] != "id")
      continue;
    $laptopid = $keyPair[1];

    $nodeId = lbd_laptopid2nodeid($laptopid);
    if($nodeId == "" || (($nodeLoaded = node_load($nodeId)) == FALSE)) {
      print(t('<p>Wrong Identifier. Please use a valid <span style="color:#ff0000;">9 digit</span> number to correctly display tags.</p>'));
      return; 
    }
    
    $adjustedWidth = 110;
    // If the Wh field is present, the print it in the label
    $wattageHour = labdoo_lib_compute_watt_hours($nodeLoaded);

    print('
<br>
<br>

<table border="0" cellpadding="1" cellspacing="1" style="width: 780px;">
        <tbody>
                <tr>
                        <td style="width: ' . $adjustedWidth . 'px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Device tag<br>www.<span style="color: rgb(255, 0, 0);">lab</span><span style="color: rgb(0, 102, 255);">d</span><span style="color: rgb(102, 204, 51);">oo</span>.org<br>
ID: '.$laptopid.'
</strong></p>
                        </td>
                        <td style="width: 100px;">
    ');
    lbd_generate_qrcode($laptopid);
    print('
                        </td>
                        <td style="width: ' . $adjustedWidth . 'px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Power adap. tag<br>www.<span style="color: rgb(255, 0, 0);">lab</span><span style="color: rgb(0, 102, 255);">d</span><span style="color: rgb(102, 204, 51);">oo</span>.org<br>
ID: '.$laptopid.'
</strong></p>
                        </td>
                        <td style="width: 100px;">
    ');
    lbd_generate_qrcode($laptopid);
    print('
                        </td>
                        <td style="width: ' . $adjustedWidth . 'px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Batt. comp. tag<br>www.<span style="color: rgb(255, 0, 0);">lab</span><span style="color: rgb(0, 102, 255);">d</span><span style="color: rgb(102, 204, 51);">oo</span>.org<br>
ID: '.$laptopid.'
</strong></p>
                        </td>
                        <td style="width: 100px;">
    ');
    lbd_generate_qrcode($laptopid);
    print('
                        </td>
                        <td style="width: 150px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">Battery<br>watt-hours:<br>' . $wattageHour . '<br></strong></p>
                        </td>
                </tr>
        </tbody>
</table>

    ');
  }

  return;
}


/**
 * Checks if a dooject is being followed by a user
 *
 * @param doojectObject The dooject object 
 * @param userObject The user object 
 *
 * @return boolean Returns true if the dooject is followed by the user, false otherwise
 *
 */
function labdoo_is_dooject_followed($doojectObject, $userObject) {

  $wDoojectNode = entity_metadata_wrapper('node', $doojectObject);
  $currList = $wDoojectNode->field_additional_followers->value();

  if(in_array($userObject, $currList))
    return True;
  else
    return False;
}
 

/**
 * Updates the flags of a dooject 
 *
 * @param method The method defining what type of action: {f (follow), p (pick me up)}
 * @param laptopid The ID of the dooject 
 * @param userid The ID of the user 
 * @param value The value to set 
 *
 */
function labdoo_update_flags_dooject($method = "", $doojectId = NULL, $userId = NULL, $value = NULL) {

  if($method != 'f' && $method != 'p')
  {
    // Not a valid method
    return;
  }

  if(($doojectId == NULL) || (!is_numeric($doojectId)) || (intval($doojectId) < 0))
  {
    // Not a valid dooject
    return;
  }

  if(($userId == NULL) || (!is_numeric($userId)) || (intval($userId) < 0))
  {
    // Not a valid user
    return;
  }

  if($value != 0 && $value != 1)
  {
    // Wrong parameter
    return;
  }

  $doojectNode = node_load($doojectId);
  if($doojectNode == FALSE || $doojectNode->type != 'laptop')
  {
    // Dooject not found
    return;
  }

  $newRef = user_load($userId);
  if($newRef == FALSE)
  {
    // User not found
    return;
  }

  if($method == 'f') {
    $wDoojectNode = entity_metadata_wrapper('node', $doojectNode);
    $currList = $wDoojectNode->field_additional_followers->value();
    if(!$currList)
      $currList = array();

    if(in_array($newRef, $currList))
    {
      if($value == '1')
      {
        drupal_set_message(t('You are already following Dootronic ' . $doojectNode->title));
        return; // User is already following this dooject, just return
      }
    }
    else if($value == '0')
    {
      drupal_set_message(t('You are not following Dootronic ' . $doojectNode->title));
      return; // User is already not following this dooject, just return
    }

    if($value == '1')
    {
      $currList[] = $newRef;
      drupal_set_message(t('You are now following Dootronic ' . $doojectNode->title));
    }
    else
    {
      $key = array_search($newRef, $currList);
      unset($currList[$key]);
      drupal_set_message(t('You are no longer following Dootronic ' . $doojectNode->title));
    }

    $wDoojectNode->field_additional_followers->set($currList);
    $wDoojectNode->save();
  }

  if($method == 'p') {
    $wDoojectNode = entity_metadata_wrapper('node', $doojectNode);
    $currPickmeFlag = $wDoojectNode->field_pick_me_up->value();
    if($value == '1') {
      drupal_set_message(t('Dootronic ' . $doojectNode->title . ' is marked as ready to be picked up'));
      $wDoojectNode->field_pick_me_up->set(TRUE);
    }
    else {
      drupal_set_message(t('Dootronic ' . $doojectNode->title . ' is marked as not ready to be picked up'));
      $wDoojectNode->field_pick_me_up->set(FALSE);
    }
    $wDoojectNode->save();
  }

  return;
}


/**
 * Get the value of a node field.
 * If there are multiple values, get just the first one. 
 * Field must have the key $key.
 *
 * @param node $node
 *   The node where the entity field is contained
 * @param string $field 
 *   The entity field name 
 * @param string $type
 *   The type of node, it must be one of {'user', 'node', 'comment'}
 * @param string $key
 *   The key to retrieve
 *
 */
function labdoo_lib_get_field($node, $field, $type, $key) {
  $field_items = field_get_items($type, $node, $field);
  if(!$field_items)
    return;
  $item = array_values($field_items)[0];
  if(!$item)
    return NULL;
  return($item[$key]);
}


/**
 * Prints an array in a user friendly way
 *
 * @param array $array An input array
 * @param string $prefix A prefix to add before the printing of each element of the array
 *
 */
function labdoo_lib_print_array($array) {
  print '<pre>'; print_r($array);  print '</pre>';
  return;
}


/**
 * Prings a backtrace (for debugging purposes)
 *
 */
function labdoo_lib_print_backtrace() {
  $trace=debug_backtrace();
  $index = 0;
  while($trace[$index]) {
    $caller=$trace[$index];
    drupal_set_message("Called by {$caller['function']}");
    $index++;
  }
  return;
}


/**
 * Renders the AddToAny share button
 *
 * @return Code rendering the AddToAny block
 *
 */
function _render_addtoany() {
  $blockAddToAny = module_invoke('addtoany', 'block_view', 'addtoany_button');
  $code = render($blockAddToAny["content"]);
  // Add a tiny invisible image (of size zero in fact) to control the image that will show up 
  // when sharing the page with addtoany
  $code = $code . '<img src="/profiles/labdoo/files/pictures/laptop.png" width="0" style="visibility:hidden"/>';
  return($code);
}


/**
 * Renders the language switch block 
 *
 * @return Code rendering the language switch block
 * 
 */
function labdoo_render_language_switch() {
  $blockLanguage = module_invoke('lang_dropdown', 'block_view', 'language');
  $languageSwitchCode = render($blockLanguage["content"]); 
  $languageSwitchCode = str_replace("<form ", "<form style='height:10px' ", $languageSwitchCode);
  $code = "<table><tr><td>$languageSwitchCode</td></tr><tr><td>"._render_addtoany()."</td></tr></table>" . "<br/>";
  return($code);
} 


/**
 * Renders the macro statistics 
 *
 * @param string $type Type of rendering, can be "horizontal" or "vertical"
 * @return Code rendering the macro statistics
 *
 */
function labdoo_render_macro_stats($type, $addTitle=False) {
  $numLaptopsNeeded = labdoo_get_demand(NULL, NULL, FALSE); 
  $numLaptopsDelivered = labdoo_getnum_doojects(NULL, NULL, 'S4');
  $numLaptopsTransit = labdoo_getnum_doojects(NULL, NULL, 'T1') + labdoo_getnum_doojects(NULL, NULL, 'S3'); 
  $numLaptopsTagged = lbd_get_total_num_objects('laptop'); 
  $numHubs = lbd_get_total_num_objects('hub');
  $numEdoovillages = lbd_get_total_num_objects('edoovillage');
  $numStudents = lbd_get_total_num_objects('student');
  $numCountries = lbd_get_total_num_objects('country');;

  if($type == "vertical") {
    $header = "";
    $separator = "<br>";
    $trailer = "<br>";
  }
  else {
    $blockLanguage = module_invoke('lang_dropdown', 'block_view', 'language');
    $languageSwitchCode = render($blockLanguage["content"]); 
    $languageSwitchCode = str_replace("<form ", "<form style='height:10px' ", $languageSwitchCode);
    $header = "<table><tr><td style='width:1090px'>";
    $separator = "&nbsp; &nbsp;";
    $trailer ="</td><td>"."</td><td width='130px' align='center'>".labdoo_render_language_switch()."</td></tr></table>";
  }

  $statsTitle = "";
  if($addTitle)
    $statsTitle = t("Global Progress: ");

// Lines currently not included in the macro stats:
// <span style=\"font-size: 24px; align: left; line-height: 30px; color: #ff0000\">$numLaptopsNeeded</span>
// <span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Dootronics needed') . "</span>$separator

  $code = $header;
  $code = $code . $statsTitle . "
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numLaptopsTagged</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Dootronics tagged') . "</span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numLaptopsTransit</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('In transit') . "</span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numLaptopsDelivered</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Delivered') . "</span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numHubs</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Hubs') . "</span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numEdoovillages</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Edoovillages') . "</span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numStudents</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Students') . "</span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; color: #ff0000\">$numCountries</span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Countries') . "</span>$separator
$trailer
  ";

  return $code;
}


/**
 * Renders the Labdoo footer block 
 *
 * @return The code to render
 *
 */
function labdoo_render_footer() {
  global $language;
  $defaultLanguage = language_default();

  // Compute language code prefix for links
  $langCode = "";
  if($language->language != $defaultLanguage->language)
    $langCode = "/" . $language->language;

  // Compute footer links (TODO: factor out this code into a function)
  $path = explode('/', drupal_get_normal_path('content/labdoos-terms-and-conditions'));
  $urlTerms = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/source-code-development-team'));
  $urlDev = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/glits-good-labdoo-habits'));
  $urlGlits = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/faq'));
  $urlFaq = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/values-philosophy-and-principles-labdoo-project'));
  $urlValues = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/about-labdoo'));
  $urlNutshell = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $urlContact = '"'.$langCode.'/contact'.'"';

  // Now write the code
  $aboutLabdoo = t('About Labdoo');
  $valuesAndPhilos = t('Values and Philosophy');
  $termsAndConditions = t('Terms and Conditions');
  $sourceCode = t('Source Code / Development Team'); 
  $contactLabdoo = t('Contact Labdoo');
  $faq = t('FAQ');

  $code = ' 
<table align="center"> 
<tr>
<td width="300">
<a href='.$urlNutshell.'>'.$aboutLabdoo.'</a>
</td>
<td width="250">
<a href='.$urlGlits.'>Glits</a>
</td>
<td width="300">
<img src="/profiles/labdoo/files/pictures/equation-2-alpha-smaller.png" width="60">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="/rss.xml"><img src="/misc/feed.png"></a>
</td>
</tr>
<tr>
<td>
<a href='.$urlValues.'>'.$valuesAndPhilos.'</a>
</td>
<td>
<a href='.$urlFaq.'>'.$faq.'</a>
</td>
<td>
<a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons</a>
</td>
</tr>
<tr>
<td>
<a href='.$urlDev.'>'.$sourceCode.'</a>
</td>
<td>
<a href='.$urlTerms.'>'.$termsAndConditions.'</a>
</td>
<td>
<a href='.$urlContact.'>'.$contactLabdoo.'</a>
</td>
</tr>
</table>
<br/><br/>
<img src="/profiles/labdoo/files/pictures/footer-acts.png">
';

  // Some regions need special footer. 
  // The following overwrites the footer block based on each region / language.
  if($langCode == '/de') {
    $code = ' 
<table align="center"> 
<tr>
<td width="300">
<a href='.$urlNutshell.'>'.$aboutLabdoo.'</a>
</td>
<td width="250">
<a href='.$urlGlits.'>Glits</a>
</td>
<td width="300">
<img src="/profiles/labdoo/files/pictures/equation-2-alpha-smaller.png" width="60">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="/rss.xml"><img src="/misc/feed.png"></a>
</td>
</tr>
<tr>
<td>
<a href='.$urlValues.'>'.$valuesAndPhilos.'</a>
</td>
<td>
<a href='.$urlFaq.'>'.$faq.'</a>
</td>
<td>
<a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons</a>
</td>
</tr>
<tr>
<td>
<a href='.$urlDev.'>'.$sourceCode.'</a>
</td>
<td>
<a href="/de/content/impressum">Impressum</a>
</td>
<td>
<a href='.$urlContact.'>'.$contactLabdoo.'</a>
</td>
</tr>
</table>
<br/><br/>
<img src="/profiles/labdoo/files/pictures/footer-acts.png">
';
  }

  return $code;
}


/**
 * Renders the Labdoo team object header
 *
 * @return The code to render
 *
 */
function labdoo_render_team_object_header() {
  if ((arg(0) != 'node') || !is_numeric(arg(1)))
    return;
  $node = node_load(arg(1));

  $code = $code . "<p align='right'><strong><font color='gray'>" . t("Following this conversation") . "</font></strong><br/>" . lbd_print_team_followers($node) . "</p>"; 
  $code = $code . "<hr/>";

  return $code; 
}


/**
 * Renders the superhub menu block 
 *
 * @return The code to render
 *
 */
function labdoo_render_superhub_menu() {
  global $language;

  //
  // If we are here, we passed the filter (labdoo_block_filter_superhub_menu)
  // so that there can only be two cases:
  //   (1) We are in a superhub page. Load it's associated menu block and return its body code.
  //   (2) We are not in a superhub page but there exists a superhub block menu with a language
  //       equal to the current page language. Load this superhub block menu.
  //
  if(labdoo_lib_node_is_type(array('superhub_page'))) {
    # case (1)
    $query = "SELECT entity_id FROM field_data_field_linked_pages WHERE field_linked_pages_target_id=" . arg(1);
  }
  else {
    if($language->language == 'en')
      return "";
    # case (2)
    $query = "SELECT entity_id FROM field_data_field_shub_page_language WHERE field_shub_page_language_value='$language->language' AND entity_id IN 
             (SELECT entity_id FROM field_data_field_superhub_page_type WHERE field_superhub_page_type_value='block')";
  }
  $menuBlockId = db_query($query)->fetchField();
  if($menuBlockId == "")
    return "";

  $node = node_load($menuBlockId);
  $code = labdoo_lib_get_field($node, 'body', 'node', 'value');
  return $code;
}


/**
 * Implements hook_user_view().
 *
 */
function labdoo_lib_user_view($account, $view_mode, $langcode) {
  // Set the page title of the user profile page 
  // to the user's full name.
  $wrapper = entity_metadata_wrapper('user', $account);
  drupal_set_title($wrapper->field_user_name->value());

  return;
}


/**
 * Implements hook_user_presave
 *
 */
function labdoo_lib_user_presave(&$edit, &$account, $category) {
  /*
   * When creating or updating a user, geolocate its position so that
   * it can be displayed on the user maps
   */
  if(!isset($edit['locations']))
    return;
  $location = $edit['locations'][0]; 
  $ret = labdoo_lookup_coordinates($location['country'],
                                   $location['city'],
                                   $edit['locations'][0]['latitude'],
                                   $edit['locations'][0]['longitude']);
  if($ret == 0) // If successful, do not let the system attempt to geolocate it anymore
    $edit['locations'][0]['inhibit_geocode'] = TRUE;
  return;
}


/**
 * Implements the visibility filter for the blocks in the sidebar_second region
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_sidebar_second() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "actions") == 0)
      return TRUE;

  if(strcmp($path, "myActions") == 0)
      return TRUE;

  if(strcmp($path, "teams") == 0)
      return TRUE;

  if(strcmp($path, "teams-activities") == 0)
      return TRUE;

  if(strcmp($path, "my-teams-activities") == 0)
      return TRUE;

  if(strcmp($path, "my-teams") == 0)
      return TRUE;

  if(strcmp($path, "wiki-index") == 0)
      return TRUE;

  if(strcmp($path, "newsletters") == 0)
      return TRUE;

  if(strcmp($path, "hubs") == 0)
      return TRUE;

  return FALSE;
}


/**
 * Implements the visibility filter for the vertical macro stats block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_macro_vertical() {
  $path = drupal_get_path_alias(current_path());

  # For wiki pages, do not show the vertical stats (show instead the horizontal stats),
  # except for the main general wiki index page
  if(labdoo_lib_node_is_type(array('book')) && strcmp($path, "wiki-index") != 0)
    return FALSE;

  return labdoo_block_filter_sidebar_second();
}


/**
 * Implements the visibility filter for the actions feed block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_actions_feed() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "wiki-index") == 0)
      return FALSE;

  if(labdoo_lib_node_is_type(array('book')))
    return FALSE;

  return labdoo_block_filter_sidebar_second();
}


/**
 * Implements the visibility filter for the search block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_search() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "wiki-index") == 0)
      return TRUE;

  if(labdoo_lib_node_is_type(array('book', 'team', 'team_page', 'event', 'team_task')))
    return TRUE;

  return labdoo_block_filter_sidebar_second();
}


/**
 * Implements the visibility filter for the language switch block
 *    
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *    
 */
function labdoo_block_filter_language_switch() {

  // Show up the switch whenever the right column (sidebar_second) is displayed 
  if(labdoo_block_filter_sidebar_second())
    return TRUE;

  return FALSE;
}


/**
 * Implements the visibility filter for the blocks in the header region
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_header() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "user/login") == 0)
      return TRUE;

  if(strcmp($path, "user") == 0)
      return TRUE;

  if(strcmp($path, "user/register") == 0)
      return TRUE;

  if(strcmp($path, "user/password") == 0)
      return TRUE;

  if(strcmp($path, "map") == 0)
      return TRUE;

  if(strcmp($path, "dootrips") == 0)
      return TRUE;

  if(strcmp($path, "labdooers") == 0)
      return TRUE;

  if(strcmp($path, "teams-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "edoovillage") == 0)
      return TRUE;

  if(strcmp($path, "hub") == 0)
      return TRUE;

  if(strcmp($path, "contact") == 0)
      return TRUE;

  if(strcmp($path, "content/dootronics-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "content/dootrips-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "content/edoovillages-dashboard") == 0 || strcmp($path, "call-for-laptops") == 0)
      return TRUE;

  if(strcmp($path, "content/hubs-dashboard") == 0)
      return TRUE;

  if((strcmp($path, "share-wall") == 0) || (strcmp($path, "content/my-share-wall") == 0))
      return TRUE;

  if(labdoo_lib_node_is_type(array('laptop', 'dootrip', 'node_gallery_gallery', 'drupal_wall', 'team_page', 'superhub_page', 'simplenews')))
    return TRUE;

  if(0 === strpos($path, 'node/add/'))
      return TRUE;

  if(lbd_teams_page_group_id() || (0 === strpos($path, 'content/team-members')))
    return TRUE;

  if(lbd_wiki_is_book_node())
    return TRUE;

  return FALSE;
}


/**
 * Implements the visibility filter for the Labdoo footer block 
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_footer() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "content/follow-dooject") == 0)
      return FALSE;

  if(strcmp($path, "content/tag-one-dooject") == 0)
      return FALSE;

  return TRUE;
}


/**
 * Implements the visibility filter for the Labdoo team object header 
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_team_object_header() {

  if(!user_is_logged_in()) 
    return FALSE;
  if(!labdoo_lib_node_is_type(array('team_page', 'event', 'team_task')))
    return FALSE;

  return TRUE;
}


/**
 * Implements the visibility filter for the superhub menu block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_superhub_menu() {
  global $language;

  /*
   * If there exists a superhub menu page with the 'Language'
   * field set and equal to the current page language,
   * display such superhub menu page.
   */
  $query = "SELECT entity_id FROM field_data_field_shub_page_language WHERE field_shub_page_language_value='$language->language' AND entity_id IN 
           (SELECT entity_id FROM field_data_field_superhub_page_type WHERE field_superhub_page_type_value='block')";
  $menuBlockId = db_query($query)->fetchField();
  // Return true if such menu block was found and if sidebar_second is present.
  if($menuBlockId && labdoo_block_filter_sidebar_second())
    return TRUE;

  /*
   * Check that it is of the right content type
   */
  if(!labdoo_lib_node_is_type(array('superhub_page', 'book')))
    return FALSE;

  $node = node_load(arg(1));

  /*
   * Check that it is of type page
   */
//  if(labdoo_lib_get_field($node, 'field_superhub_page_type', 'node', 'value') != 'page')
//    return FALSE;

  return TRUE;
}


/**
 * Implements hook_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 * This code is based on the Better Formats module.
 *
 */
function labdoo_lib_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'labdoo_lib_filter_process_format';
      }
    }
  }
}


/**
 * Callback for MODULENAME_element_info_alter().
 *
 */
function labdoo_lib_filter_process_format($element) {
  $element = filter_process_format($element);
  if(!isset($element['#bundle'])) {
    return;
  }
  // Change input format to "Filtered HTML" for body fields of article nodes
  if (($element['#bundle'] == 'superhub_page' || $element['#bundle'] == 'simplenews') && $element['#field_name'] == 'body') {
    $element['format']['format']['#default_value'] = 'full_html';
  }
  return $element;
}


/**
 * Returns the number of doojects assigned to a dootrip
 *
 * @param node $nodeLoaded The dootrip node (loaded)
 *
 * @return The number of doojects
 *
 */
function labdoo_lib_compute_dootrip_load($nodeLoaded) {
  $dootrippers = field_get_items('node', $nodeLoaded, 'field_laptops');
  return(count($dootrippers));
}


/**
 * Call back function used to check if the given account corresponds
 * to the current user
 *
 * @param $account An input account
 *
 * @return TRUE if the accounts match, FALSE otherwise
 *
 */
function _is_my_user_page($account = NULL) {
  global $user;

  if($account->name == $user->name)
      return TRUE;

  return FALSE;
}


/*
 * hook_menu
 *
 */
function labdoo_lib_menu() {

  $items['user/%user/metrics'] = array(
    'access callback' => '_is_my_user_page',
    'access arguments' => array(1),
    'page callback' => '_labdoo_lib_user_metrics',
    'page arguments' => array(1),
    'title' => t('Metrics'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/myRoles'] = array(
    'access callback' => '_is_my_user_page',
    'access arguments' => array(1),
    'page callback' => '_labdoo_lib_user_roles',
    'page arguments' => array(1),
    'title' => t('My roles'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}


function _labdoo_lib_user_num_doojects($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_tagger)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM 
                 (SELECT entity_id FROM field_data_field_tagger WHERE (field_tagger_target_id=:uid) 
                  UNION
                  SELECT entity_id FROM field_data_field_manager WHERE (field_manager_target_id=:uid)
                  UNION
                  SELECT entity_id FROM field_data_field_additional_editors WHERE (field_additional_editors_target_id=:uid) 
                  UNION
                  SELECT entity_id FROM field_data_field_additional_followers WHERE (field_additional_followers_target_id=:uid)
                 )
                AS tUser)";
  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_dootrips($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_destination_of_the_trip)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM
                (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE (field_dootripper_s__target_id=:uid)
                 UNION
                (SELECT DISTINCT entity_id FROM field_data_field_dootrip_additional_editors WHERE field_dootrip_additional_editors_target_id=:uid))
                AS tUser)";

  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_edoovillages($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_edoovillage_status)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM 
                 ((SELECT DISTINCT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
                   (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_followers WHERE field_additional_followers_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_editors WHERE field_additional_editors_target_id=:uid)))
                  UNION
                  (SELECT DISTINCT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
                    entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
                    entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)))
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_project_manager_s_ WHERE field_project_manager_s__target_id=:uid)
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_edoo_additional_editors WHERE field_edoo_additional_editors_target_id=:uid))
                  AS tUser)";

  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_hubs($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT DISTINCT entity_id FROM field_data_field_hub_manager_s_)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM 
                 ((SELECT DISTINCT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
                   (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_followers WHERE field_additional_followers_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_editors WHERE field_additional_editors_target_id=:uid)))
                  UNION
                  (SELECT DISTINCT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
                    entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
                    entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)))
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_hub_manager_s_ WHERE field_hub_manager_s__target_id=:uid)
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_hub_additional_editors WHERE field_hub_additional_editors_target_id=:uid))
                  AS tUser)";

  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_wikis($userId) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->propertyCondition('type', 'book');
  $query->propertyCondition('uid', $userId);
  $result = $query->count()->execute();

  return($result);
}


function _labdoo_lib_user_metrics($account = NULL) {
  global $user;
  $userId = $user->uid;

  if(!user_is_logged_in()) {
    return "";
  }

  $labelDoojects = t('Dootronics*: ');
  $labelDootrips = t('Dootrips*: ');
  $labelEdoovillages = t('Edoovillages: ');
  $labelHubs = t('Hubs: ');
  $labelWiki = t('Wiki articles: ');

  $labelCarbon = t('Carbon emissions (kg): ');
  $labelTrees = t('Trees: ');
  $labelWater = t('Water (Liter): ');
  $labelGasLiters = t('Liters of gas: ');
  $labelPlasticBottles = t('Plastic bottles: ');
  $labelAluminumCans = t('Aluminum cans: ');
  $labelGold = t('Gold (gr): ');
  $labelSilver = t('Silver (gr): ');
  $labelPalladium = t('Palladium (gr): ');
  $labelCopper = t('Copper (kg): ');
  $labelCobalt = t('Cobalt (kg): ');
  $labelChemical = t('Chemical substances (kg): ');

  $textLegend = t('(*) doojects and dootrips that you have participated with.<br>
                   (**) measured based on number of doojects that you have participated with.');

  // Compute metrics 
  $numDoojects = _labdoo_lib_user_num_doojects($userId); 
  $numDootrips = _labdoo_lib_user_num_dootrips($userId); 
  $numEdoovillages = _labdoo_lib_user_num_edoovillages($userId); 
  $numHubs = _labdoo_lib_user_num_hubs($userId); 
  $numWikis = _labdoo_lib_user_num_wikis($userId); 

  // Compute carbon footprint (constants are taken from the Labdoo carbon footprint calculator)
  $footprintCarbon = $numDoojects * 41;
  $footprintTrees = $numDoojects * 2;
  $footprintGas = $numDoojects * 26.5;
  $footprintPlastic = $numDoojects * 59;
  $footprintWater = $numDoojects * 1500;
  $footprintAluminum = $numDoojects * 270;
  $footprintGold = $numDoojects * 0.22;
  $footprintSilver = $numDoojects * 0.44;
  $footprintPalladium = $numDoojects * 0.08;
  $footprintCopper = $numDoojects * 0.3;
  $footprintCobalt = $numDoojects * 0.065;
  $footprintChemical = $numDoojects * 22;

  $code = "
<strong>My contributions</strong>
<hr/>
<table> 
<tr>
<td width='180'>
$labelDoojects
</td>
<td>
$numDoojects
</td>
</tr>
<tr>
<td width='180'>
$labelDootrips
</td>
<td>
$numDootrips
</td>
</tr>
<tr>
<td width='180'>
$labelEdoovillages
</td>
<td>
$numEdoovillages
</td>
</tr>
<tr>
<td width='180'>
$labelHubs
</td>
<td>
$numHubs
</td>
</tr>
<tr>
<td width='180'>
$labelWiki
</td>
<td>
$numWikis
</td>
</tr>
</table>
<hr/>
<br>
<strong>My carbon footprint savings**</strong>
<hr/>
<table> 
<tr>
<td width='180'>
$labelCarbon
</td>
<td>
$footprintCarbon
</td>
</tr>
<tr>
<td width='180'>
$labelTrees
</td>
<td>
$footprintTrees
</td>
</tr>
<tr>
<td width='180'>
$labelWater
</td>
<td>
$footprintWater
</td>
</tr>
<tr>
<td width='180'>
$labelGasLiters
</td>
<td>
$footprintGas
</td>
</tr>
<tr>
<td width='180'>
$labelPlasticBottles
</td>
<td>
$footprintPlastic
</td>
</tr>
<tr>
<td width='180'>
$labelAluminumCans
</td>
<td>
$footprintAluminum
</td>
</tr>
<tr>
<td width='180'>
$labelGold
</td>
<td>
$footprintGold
</td>
</tr>
<tr>
<td width='180'>
$labelSilver
</td>
<td>
$footprintSilver
</td>
</tr>
<tr>
<td width='180'>
$labelPalladium
</td>
<td>
$footprintPalladium
</td>
</tr>
<tr>
<td width='180'>
$labelCopper
</td>
<td>
$footprintCopper
</td>
</tr>
<tr>
<td width='180'>
$labelCobalt
</td>
<td>
$footprintCobalt
</td>
</tr>
<tr>
<td width='180'>
$labelChemical
</td>
<td>
$footprintChemical
</td>
</tr>
</table>
<hr/>
<br>
$textLegend
";

  return $code; 
}


function _labdoo_lib_user_roles($account = NULL) {
  global $user;

  if(!user_is_logged_in()) {
    return "";
  }

  $userRoles = array_values($user->roles);
  $rolesMapping = array(
    'labdooer' => t('Provides the base functionality to carry out Labdoo mini-missions.'),
    'newsletter manager' => t('Manage, create and publish newsletters to help bring awareness about your Labdoo activities.'),
    'hub manager' => t('Manage a hub, organize hub inventory, upload pictures to your hub album.'),
    'edoovillage manager' => t('Create and manage edoovillages, upload pictures to your edoovillages albums.'),
    'superhub manager' => t('Create hubs and help manage Labdoo operations at a larger regional scale.'),
    'team manager' => t('Create new teams, manage memberships and all team related activities.'),
    'book writer' => t('Create and edit new wiki articles and books.'),
    'administrator' => t('All access rights.'),
  );

  $allRoles = array_keys($rolesMapping);
  $potentialRoles = array_diff($allRoles, $userRoles);
  $potentialRoles = array_diff($potentialRoles, array('administrator', 'labdooer'));

  $code = "
<strong>My current roles</strong>
<hr/>
<table>";

  foreach($userRoles as $role) {
    if($role == 'authenticated user')
      $role = 'labdooer';
    $code = $code . "
<tr>
<td width='180'>
" . ucfirst(t($role)) . "
</td>
<td>
" . $rolesMapping[$role] . "
</td>
</tr>";
  }

  if(empty($potentialRoles))
    $starReference = "";
  else
    $starReference = "*";

  $code = $code . "
</table><hr/><br>";

  $code = $code . "
<strong>Available extra roles$starReference</strong>
<hr/>
<table>";

  if(empty($potentialRoles))
    $code = $code . t("You are assigned all possible roles.");

  foreach($potentialRoles as $role) {
    if($role == 'labdooer')
      continue; // the base role is always assigned to a user
    $code = $code . "
<tr>
<td width='180'>
" . ucfirst(t($role)) . "
</td>
<td>
" . $rolesMapping[$role] . "
</td>
</tr>";
  }

  $code = $code . "
</table><hr/>";

  if(!empty($potentialRoles))
    $code = $code . t('(*) If you want to assign extra roles to your user account, please email contact@labdoo.org.');

  return $code;
}


/**
 * Implements hook_user_login
 *
 */
function labdoo_lib_user_login(&$edit, $account)
{

  // Don't redirect if this is a password recovery login action
  if(isset($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset') 
    return;

  // retrieve user language
  $user_language = $account->language;

  // don't do anything if no language is defined
  if (!$user_language) {
    return;
  }

  // verify if language exists
  $languages = language_list();
  if (!isset($languages[$user_language])) {
    return;
  }

  // verify if language is enabled
  if (!$languages[$user_language]->enabled) {
    return;
  }

  // redirect to preferred language user account page 
  drupal_goto('user', array(
    'language' => $languages[$user_language],
  ));
}


/**
 * Returns TRUE if current node is of a certain type; FALSE otherwise
 *
 * @param array $typesList An array of content types
 * @param boolean $onlyView Return FALSE if node is not in view mode
 *
 * @return TRUE if the node is of a type in $typesList or FALSE if otherwise
 *
 */
function labdoo_lib_node_is_type($typesList, $onlyView = True) {
  // TODO: this function provides an abstraction method to generally
  // check if a node is of a certain type. It was implemented after
  // noticing that this type of check is needed in numerous places
  // accross the code, and so there are still a good number of places
  // where instead of calling this function, the following code can
  // be found in line. Need to go through the code and substitute 
  // the code in such places with a call to this method.
  if($onlyView && arg(2) != "") //  Display only in node view mode
    return FALSE;

  if((arg(0) != 'node'))
    return FALSE;

  if(!is_numeric(arg(1)))
    return FALSE;

  $node = node_load(arg(1));
  if(!$node)
    return FALSE;
  if(!in_array($node->type, $typesList))
    return FALSE;

  return TRUE;
}


/**
 * Implements hook_menu_local_tasks_alter
 *
 */
function labdoo_lib_menu_local_tasks_alter(&$data) {
    if(labdoo_lib_node_is_type(array('drupal_wall'), FALSE)) {
    if(sizeof($data['tabs']) > 0) {
      foreach($data['tabs'][0]['output'] as $key => $value) {
        if($value['#link']['path'] == "node/%/clone/%" || $value['#link']['path'] == "node/%/view") {
          unset($data['tabs'][0]['output'][$key]);
        }
      }
    }
  }
}


/**
 * Implements hook_views_pre_render
 *
 */
function labdoo_lib_views_pre_render(&$view) {
  if($view->name == 'wiki') {
    $view->attachment_before = t('Don\'t see a book available in a language you need? <a href="content/wiki-translations">learn how you can contribute a book translation.</a>');
  }
}


/**
 * Implementation of hook_node_validate 
 */
function labdoo_lib_node_validate($node, $form, &$form_state) {

  if ($node->type == 'dootrip') {
    $departureDate = labdoo_lib_get_field($node, 'field_departure_date', 'node', 'value');
    $arrivalDate = labdoo_lib_get_field($node, 'field_arrival_date', 'node', 'value');
    if($arrivalDate < $departureDate)
      form_set_error('field_arrival_date', t("The arrival date must not be before the departure date"));
  }

  return;
} 


/**
 * Generates HTML/Javascript code to render a button to download
 * a CSV file from a PHP (string) table array.
 *
 * @param array $table  
 *   A PHP string array with the data to download as a CSV file
 *
 * @param string @$signature
 *   A string to uniquely identify this button to avoid name collisions
 *
 * @return string $code
 *   The code to render
 *
 */ 
function labdoo_table_download_button($table, $signature="", $downloadIcon="download-button-data.png", $iconWidth=150) {

  // If the table does not have at least two rows (header 
  // plus one item), return empty code.
  if(!array_key_exists(1, $table))
    return "";

  // Convert a PHP table of strings into an HTML table
  $tableCode = "<table>";
  for ($i = 0; $i < count($table); $i++) { 
    $tableCode = $tableCode . "<tr>";
    for ($j = 0; $j < count($table[$i]); $j++)
      $tableCode = $tableCode . "<th>" . $table[$i][$j] . "</th>";
    $tableCode = $tableCode . "</tr>";
  }
  $tableCode = $tableCode . "</table>";

  // Use javascript to generate a download button for the table
  $code = '
          <div id="dvData'.$signature.'" style="display:none"> ' . $tableCode . ' </div>
          <div class=\'button\'>
              <a href="#" id ="export'.$signature.'" role=\'button\'><img src="/sites/default/files/content/general-objects/'.$downloadIcon.'" width="'.$iconWidth.'"></a>
           </div>

        <script type=\'text/javascript\' src=\'https://code.jquery.com/jquery-1.11.0.min.js\'></script>
        <script type=\'text/javascript\'>

        $(document).ready(function () {

            function exportTableToCSV($table, filename) {

                var $headers = $table.find(\'tr:has(th)\'),
                    $rows = $table.find(\'tr:has(td)\'),
                    // Temporary delimiter characters unlikely to be typed by keyboard
                    // This is to avoid accidentally splitting the actual contents
                    tmpColDelim = String.fromCharCode(11), // vertical tab character
                    tmpRowDelim = String.fromCharCode(0), // null character
                    // actual delimiter characters for CSV format
                    colDelim = \'","\',
                    rowDelim = \'"\r\n"\';
                    // Grab text from table into CSV formatted string
                    var csv = \'"\';
                    csv += formatRows($headers.map(grabRow));
                    csv += rowDelim;
                    csv += formatRows($rows.map(grabRow)) + \'"\';
                    // Data URI
                    var csvData = \'data:application/csv;charset=utf-8,\' + encodeURIComponent(csv);
                $(this)
                    .attr({
                    \'download\': filename
                        ,\'href\': csvData
                        //,\'target\' : \'_blank\' //if you want it to open in a new window
                });

                // Format the output so it has the appropriate delimiters
                function formatRows(rows){
                    return rows.get().join(tmpRowDelim)
                        .split(tmpRowDelim).join(rowDelim)
                        .split(tmpColDelim).join(colDelim);
                }

                // Grab and format a row from the table
                function grabRow(i,row){
                    var $row = $(row);
                    //for some reason $cols = $row.find(\'td\') || $row.find(\'th\') won\'t work...
                    var $cols = $row.find(\'td\'); 
                    if(!$cols.length) $cols = $row.find(\'th\');  
                    return $cols.map(grabCol)
                                .get().join(tmpColDelim);
                }

                // Grab and format a column from the table 
                function grabCol(j,col){
                    var $col = $(col),
                        $text = $col.text();
                    return $text.replace(\'"\', \'""\'); // escape double quotes
                }
            }

            $("#export'.$signature.'").click(function (event) {
                // CSV
                var d = new Date();
                var prefix = d.getFullYear() + ":" +
                             ("00" + (d.getMonth() + 1)).slice(-2) + "/" + 
                             ("00" + d.getDate()).slice(-2) + "/" + 
                             ("00" + d.getHours()).slice(-2) + ":" + 
                             ("00" + d.getMinutes()).slice(-2) + ":" + 
                             ("00" + d.getSeconds()).slice(-2);
                exportTableToCSV.apply(this, [$(\'#dvData'.$signature.'>table\'), "data-" + prefix + ".csv"]);
                
                // IF CSV, don\'t do event.preventDefault() or return false
                // We actually need this to be a typical hyperlink
            });
        });
    </script>
  ';

  return $code;
}


/**
 * Generates a download button from the query results of a view.
 *
 * @param array
 *   viewResult The results of a views query using views_get_view_result()
 *
 * @param string @$signature
 *   A string to uniquely identify this button to avoid name collisions
 * 
 * @return
 *   Code that renders the download button
 *
 */
function labdoo_views_download_button($viewResult, $signature="") {

  // Compose the header of the table first                                                
  $j = 0;
  $viewTable[0][$j++] = "ID";
  foreach($viewResult[0] as $fieldName => $value) { 
    // All CCK fields start with an extra "field_" prefix (e.g., field_field_status).
    // Remove it.
    if(substr($fieldName, 0, 6) == "field_")
      $fieldName = substr($fieldName, 6);
    $fieldInfo = field_info_instance('node', $fieldName, 'laptop');
    // If nothing was returned, skip this field as it's not interesting.
    if(!$fieldInfo)
      continue;

    $fieldNames[] = "field_" . $fieldName;
    $viewTable[0][$j++] = $fieldInfo['label'];
  }

  // Compose next the table rows
  foreach($viewResult as $key => $object) {
    $j = 0;
    # Add "# " to avoid being casted to an integer value
    $viewTable[$key+1][$j++] = "# ".$object->node_title; 
    foreach($fieldNames as $fieldName) { 
      $fieldValue = $object->$fieldName;
      $markup = $fieldValue[0]['rendered']['#markup'];
      $viewTable[$key+1][$j++] = $markup;
    }
  }

  return labdoo_table_download_button($viewTable, $signature);
}

